trigger: none
pr: none

parameters:
  - name: resourceType
    default: 'Microsoft.Web/sites'

variables:
  functionAppName: 'AzdoTools'
  notes: 'Deploying to production'
  healthCheckUrl: 'https://azdotools.azurewebsites.net/api/health'
  metadataArtifactName: 'Metadata'
  provisionArtifactName: 'ProvisionResult'
  manifestPath: '$(Pipeline.Workspace)/manifest/manifest.json'
  artifactName: 'functionapp'

resources:
  pipelines:
    - pipeline: infraProvision
      source: AzdoTools-Infrastructure
      trigger: none
    - pipeline: testDeploy
      source: AzdoTools-Test-Deploy
      trigger: none

stages:

# ðŸ§ª Stage 1: Validate Prerequisites
- stage: ValidatePrereqs
  displayName: 'Validate Prerequisites'
  jobs:
  - job: ValidateTestBuild
    displayName: 'Validate Latest Test Build Passed'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - download: testDeploy
      artifact: ${{ variables.metadataArtifactName }}

    - task: PowerShell@2
      displayName: 'Read Artifact Metadata'
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/scripts/Read-ArtifactMetadata.ps1'
        arguments: >
          -MetadataPath "$(Pipeline.Workspace)/${{ variables.metadataArtifactName }}/artifact-metadata.json"

    - download: testDeploy
      artifact: ${{ variables.provisionArtifactName }}

    - task: PowerShell@2
      displayName: 'Validate Test Build Result'
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/scripts/Validate-ProvisionResult.ps1'
        arguments: >
          -ResultFilePath "$(Pipeline.Workspace)/${{ variables.provisionArtifactName }}/$(provisionResultPath)"
          -EnvName "test"

  - job: ValidateProdInfra
    displayName: 'Validate Prod Environment Provisioning'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - download: infraProvision
      artifact: ${{ variables.metadataArtifactName }}

    - task: PowerShell@2
      displayName: 'Read Artifact Metadata'
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/scripts/Read-ArtifactMetadata.ps1'
        arguments: >
          -MetadataPath "$(Pipeline.Workspace)/${{ variables.metadataArtifactName }}/artifact-metadata.json"

    - download: infraProvision
      artifact: ${{ variables.provisionArtifactName }}

    - task: PowerShell@2
      displayName: 'Validate Provisioning Result'
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/scripts/Validate-ProvisionResult.ps1'
        arguments: >
          -ResultFilePath "$(Pipeline.Workspace)/${{ variables.provisionArtifactName }}/$(provisionResultPath)"
          -EnvName "prod"

# ðŸš€ Stage 2: Deploy to Production
- stage: Deploy
  displayName: 'Deploy to Production'
  dependsOn: ValidatePrereqs
  condition: succeeded()
  jobs:

  - job: ReadManifest
    displayName: 'Read or Generate Manifest'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: ../templates/manifest-read.yml
      parameters:
        manifestPath: ${{ variables.manifestPath }}
        artifactName: ${{ variables.artifactName }}
        version: 'prod-$(Build.BuildId)'
        notes: ${{ variables.notes }}

  - job: DeployFunctionApp
    dependsOn: ReadManifest
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: ManualValidation@0
      inputs:
        instructions: 'Approve production deployment'
        onTimeout: 'reject'
        timeout: '24h'

    - template: ../templates/manifest-write.yml
      parameters:
        manifestPath: ${{ variables.manifestPath }}
        artifactPath: $(artifactPath)
        version: $(version)
        notes: $(notes)
        branch: $(branch)
        commit: $(commit)
        environment: $(environment)

    - task: AzureCLI@2
      displayName: 'Tag Function App with Version'
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az resource tag --tags version=$(version) deployedBy=AzurePipelines `
            --name $(functionAppName) `
            --resource-group HolyCheese-RG `
            --resource-type "${{ parameters.resourceType }}"

  - job: HealthCheck
    dependsOn: DeployFunctionApp
    condition: succeeded()
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: PowerShell@2
      displayName: 'Health Check'
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/scripts/HealthCheck.ps1'
        arguments: >
          -Url $(healthCheckUrl)
