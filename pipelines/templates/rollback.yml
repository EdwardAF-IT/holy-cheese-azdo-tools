parameters:
  - name: manifestPath
    type: string
    default: '$(Pipeline.Workspace)/manifest/manifest.json'
  - name: artifactName
    type: string
    default: 'functionapp'

jobs:
- job: RollbackDeployment
  displayName: 'Rollback Using Manifest'
  pool:
    vmImage: 'windows-latest'
  steps:

  - checkout: self

  - task: PowerShell@2
    name: readManifest
    displayName: 'Read Manifest for Rollback'
    inputs:
      targetType: 'inline'
      script: |
        if (!(Test-Path '${{ parameters.manifestPath }}')) {
          Write-Error "Manifest file not found at ${{ parameters.manifestPath }}"
        }

        $json = Get-Content '${{ parameters.manifestPath }}' | ConvertFrom-Json
        $artifactPath = $json.artifactPath
        $version = $json.version
        $notes = $json.notes
        $env = $json.environment

        Write-Host "##vso[task.setvariable variable=artifactPath]$artifactPath"
        Write-Host "##vso[task.setvariable variable=version]$version"
        Write-Host "##vso[task.setvariable variable=notes]$notes"
        Write-Host "##vso[task.setvariable variable=environment]$env"

  - task: PowerShell@2
    displayName: 'Redeploy Artifact'
    inputs:
      targetType: 'inline'
      script: |
        $path = "$(artifactPath)"
        if (!(Test-Path $path)) {
          Write-Error "Artifact not found at $path"
        }

        Write-Host ("Rolling back to version {0} in environment {1}" -f "$(version)", "$(environment)")
        # Insert actual redeploy logic here (e.g., Azure CLI, ARM, etc.)
        Write-Host "Redeployment triggered using artifact: $path"

  - task: PowerShell@2
    displayName: 'Tag Rollback Event'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host ("Rollback complete. Tagged version {0} with notes: {1}" -f "$(version)", "$(notes)")
