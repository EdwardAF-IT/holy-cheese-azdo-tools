trigger:
  branches:
    include:
      - main

parameters:
  - name: useHostedAgent
    type: boolean
    default: true

  - name: sharedResourceGroup
    type: string
    default: 'AzdoTools-RG-Shared'

  - name: subscriptionId
    type: string
    default: '42a2eb5c-8d13-451c-8b50-069e05cdbf86'

  - name: hostedAgentName
    type: string
    default: 'HostedAgent'

  - name: localAgentName
    type: string
    default: 'LocalPool'

variables:
  environments:
    dev:
      location: 'centralus'
      resourceGroup: 'AzdoTools-RG-Dev'
    test:
      location: 'centralus'
      resourceGroup: 'AzdoTools-RG-Test'

stages:
- stage: TryHostedShared
  condition: eq(parameters.useHostedAgent, true)
  jobs:
  - job: DeploySharedHosted
    pool:
      name: ${{ parameters.hostedAgentName }}
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: echo "Using agent: $(Agent.Name)"
      displayName: 'Agent Info'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Deploying shared infra via HostedAgent..."
          az deployment sub create \
            --location centralus \
            --template-file infra/shared-infrastructure.bicep \
            --parameters \
              subscriptionId=${{ parameters.subscriptionId }}

- stage: FallbackSharedLocal
  condition: and(eq(parameters.useHostedAgent, true), failed())
  jobs:
  - job: DeploySharedLocalFallback
    pool:
      name: ${{ parameters.localAgentName }}
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Fallback triggered"
          echo "##vso[task.setvariable variable=sharedAgentFallback;isOutput=true]true"
      displayName: 'Mark Fallback Active'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment sub create \
            --location centralus \
            --template-file infra/shared-infrastructure.bicep \
            --parameters \
              subscriptionId=${{ parameters.subscriptionId }}

- stage: ProvisionShared
  condition: eq(parameters.useHostedAgent, false)
  jobs:
  - job: DeploySharedInfra
    pool:
      name: ${{ parameters.localAgentName }}
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: echo "Using agent: $(Agent.Name)"
      displayName: 'Agent Info'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment sub create \
            --location centralus \
            --template-file infra/shared-infrastructure.bicep \
            --parameters \
              subscriptionId=${{ parameters.subscriptionId }}

- ${{ each env in variables.environments }}:
  - stage: TryHosted_${{ env.key }}
    displayName: 'Deploy ${{ env.key }} via Hosted Agent'
    condition: eq(parameters.useHostedAgent, true)
    jobs:
    - job: DeployHosted_${{ env.key }}
      pool:
        name: ${{ parameters.hostedAgentName }}
        vmImage: 'ubuntu-latest'
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: echo "Using agent: $(Agent.Name)"
        displayName: 'Agent Info'
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub create \
              --location ${{ env.value.location }} \
              --template-file infra/deploy-environment.bicep \
              --parameters \
                appName=AzdoTools \
                environmentName=${{ env.key }} \
                location=${{ env.value.location }} \
                subscriptionId=${{ parameters.subscriptionId }}
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: echo "##vso[task.setvariable variable=${{ env.key }}AgentFallback;isOutput=true]false"
        displayName: 'Mark Hosted Deploy Success'

  - stage: Fallback_${{ env.key }}
    displayName: 'Fallback to Local Agent for ${{ env.key }}'
    condition: and(eq(parameters.useHostedAgent, true), failed())
    jobs:
    - job: DeployFallback_${{ env.key }}
      pool:
        name: ${{ parameters.localAgentName }}
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: echo "Using agent: $(Agent.Name)"
        displayName: 'Agent Info'
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub create \
              --location ${{ env.value.location }} \
              --template-file infra/deploy-environment.bicep \
              --parameters \
                appName=AzdoTools \
                environmentName=${{ env.key }} \
                location=${{ env.value.location }} \
                subscriptionId=${{ parameters.subscriptionId }}
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: echo "##vso[task.setvariable variable=${{ env.key }}AgentFallback;isOutput=true]true"
        displayName: 'Mark Fallback Active'

  - stage: Deploy_${{ env.key }}
    displayName: 'Direct Deploy to ${{ env.key }} (Local Agent)'
    condition: eq(parameters.useHostedAgent, false)
    jobs:
    - job: DeployDirect_${{ env.key }}
      pool:
        name: ${{ parameters.localAgentName }}
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: echo "Using agent: $(Agent.Name)"
        displayName: 'Agent Info'
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub create \
              --location ${{ env.value.location }} \
              --template-file infra/deploy-environment.bicep \
              --parameters \
                appName=AzdoTools \
                environmentName=${{ env.key }} \
                location=${{ env.value.location }} \
                subscriptionId=${{ parameters.subscriptionId }}
