trigger:
  branches:
    include:
      - main

parameters:
  - name: useHostedAgent
    type: boolean
    default: true

  - name: appName
    type: string
    default: 'AzdoTools'

  - name: subscriptionId
    type: string
    default: '42a2eb5c-8d13-451c-8b50-069e05cdbf86'

  - name: hostedAgentName
    type: string
    default: 'Azure Pipelines'

  - name: localAgentName
    type: string
    default: 'Self-hosted Agents'

  - name: environments
    type: object
    default:
      dev:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Dev'
      test:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Test'

variables:
  useHostedAgent: ${{ parameters.useHostedAgent }}
  sharedResourceGroup: ${{ parameters.appName }}-RG-Shared

stages:
- stage: ProvisionSubscriptionInfra
  displayName: 'Prepare Subscription-Level Resources(Hosted Agent)'
  condition: eq(variables.useHostedAgent, true)
  jobs:
  - job: DeploySubscriptionBaseline
    pool:
      name: ${{ parameters.hostedAgentName }}
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Simulating hosted agent failure..."
          exit 1
      displayName: 'Simulate Hosted Failure'
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Using agent: $(Agent.Name)"
      displayName: 'Agent Info'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Provisioning baseline subscription infrastructure with hosted agent..."
          az deployment sub create \
            --location 'centralus' \
            --template-file infra/subscription-baseline.bicep \
            --parameters \
              rgSuffixes=$(jq -nc --argjson envs '${{ convertToJson(parameters.environments) }}' '$envs | keys + ["Shared"]') \
              projectPrefix=${{ parameters.appName }} \
              location='centralus'
      displayName: 'Deploy Subscription Baseline (Hosted)'

- stage: FallbackSubscriptionInfraLocal
  displayName: 'Fallback Subscription-Level Resources (Local Agent)'
  condition: and(eq(variables.useHostedAgent, true), failed())
  jobs:
  - job: DeploySubscriptionBaselineFallback
    pool:
      name: ${{ parameters.localAgentName }}
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Fallback triggered â€” using local agent"
          echo "##vso[task.setvariable variable=subscriptionAgentFallback;isOutput=true]true"
      displayName: 'Mark Fallback Active'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Provisioning baseline subscription infrastructure with local agent..."
          az deployment sub create \
            --location 'centralus' \
            --template-file infra/subscription-baseline.bicep \
            --parameters \
              rgSuffixes=$(jq -nc --argjson envs '${{ convertToJson(parameters.environments) }}' '$envs | keys + ["Shared"]') \
              projectPrefix=${{ parameters.appName }} \
              location='centralus'
      displayName: 'Deploy Subscription Baseline (Fallback)'

- stage: ProvisionSubscriptionLocal
  displayName: 'Provision Subscription Resources via Local Agent'
  condition: eq(variables.useHostedAgent, false)
  jobs:
  - job: DeploySubscriptionBaselineLocal
    pool:
      name: ${{ parameters.localAgentName }}
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: "echo \"Using local agent: $(Agent.Name)\""
      displayName: 'Agent Info'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Provisioning subscription infrastructure directly with local agent..."
          az deployment sub create \
            --location 'centralus' \
            --template-file infra/subscription-baseline.bicep \
            --parameters \
              rgSuffixes=$(jq -nc --argjson envs '${{ convertToJson(parameters.environments) }}' '$envs | keys + ["Shared"]') \
              projectPrefix=${{ parameters.appName }} \
              location='centralus'
      displayName: 'Deploy Subscription Baseline (Direct Local)'

- stage: ProvisionSharedHosted
  condition: eq(variables.useHostedAgent, true)
  displayName: 'Provision Shared Resources with Hosted Agent'
  jobs:
  - job: DeploySharedHosted
    pool:
      name: ${{ parameters.hostedAgentName }}
      vmImage: 'ubuntu-latest'
    steps:
   - task: Bash@3
     inputs:
       targetType: 'inline'
       script: |
         echo "Simulating hosted agent failure..."
         exit 1
      displayName: 'Simulate Hosted Failure'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: "echo \"Using agent: $(Agent.Name)\""
      displayName: 'Agent Info'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create \
            --resource-group ${{ variables.sharedResourceGroup }} \
            --template-file infra/shared-infrastructure.bicep \
            --parameters \
              location='centralus' \
              resourceGroupName='${{ variables.sharedResourceGroup }}' \
              tags={} \
              subscriptionId='${{ parameters.subscriptionId }}' \

- stage: FallbackSharedLocal
  condition: and(eq(variables.useHostedAgent, true), failed())
  displayName: 'Provision Shared Resources with Fallback Agent'
  jobs:
  - job: DeploySharedLocalFallback
    pool:
      name: ${{ parameters.localAgentName }}
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Fallback triggered"
          echo "##vso[task.setvariable variable=sharedAgentFallback;isOutput=true]true"
      displayName: 'Mark Fallback Active'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create \
            --resource-group ${{ variables.sharedResourceGroup }} \
            --template-file infra/shared-infrastructure.bicep \
            --parameters \
              location='centralus' \
              resourceGroupName='${{ variables.sharedResourceGroup }}' \
              tags={} \
              subscriptionId='${{ parameters.subscriptionId }}'

- stage: ProvisionShared
  condition: eq(variables.useHostedAgent, false)
  displayName: 'Provision Shared Resources'
  jobs:
  - job: DeploySharedInfra
    pool:
      name: ${{ parameters.localAgentName }}
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: "echo \"Using agent: $(Agent.Name)\""
      displayName: 'Agent Info'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create \
            --resource-group ${{ variables.sharedResourceGroup }} \
            --template-file infra/shared-infrastructure.bicep \
            --parameters \
              location='centralus' \
              resourceGroupName='${{ variables.sharedResourceGroup }}' \
              tags={} \
              subscriptionId='${{ parameters.subscriptionId }}'

- ${{ each env in parameters.environments }}:
  - stage: ProvisionHosted_${{ env.key }}
    displayName: 'Deploy ${{ env.key }} via Hosted Agent'
    condition: eq(variables.useHostedAgent, true)
    jobs:
    - job: DeployHosted_${{ env.key }}
      pool:
        name: ${{ parameters.hostedAgentName }}
        vmImage: 'ubuntu-latest'
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo "Simulating hosted agent failure..."
            exit 1
        displayName: 'Simulate Hosted Failure'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: "echo \"Using agent: $(Agent.Name)\""
        displayName: 'Agent Info'
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            envFile="infra/environments/${{ parameters.appName }}-${{ env.key }}.bicep"
            echo "Deploying ${{ env.key }} using template: $envFile"
          
            az deployment group create \
              --resource-group ${{ env.value.resourceGroup }} \
              --template-file $envFile \
              --parameters \
                appName=${{ parameters.appName }} \
                environmentName='${{ env.key }}' \
                location='${{ env.value.location }}' \
                tags={} \
                subscriptionId='${{ parameters.subscriptionId }}' \
              --debug
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: echo "##vso[task.setvariable variable=${{ env.key }}AgentFallback;isOutput=true]false"
        displayName: 'Mark Hosted Deploy Success'

  - stage: Fallback_${{ env.key }}
    displayName: 'Fallback to Local Agent for ${{ env.key }}'
    condition: and(eq(variables.useHostedAgent, true), failed())
    jobs:
    - job: DeployFallback_${{ env.key }}
      pool:
        name: ${{ parameters.localAgentName }}
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: "echo \"Using agent: $(Agent.Name)\""
        displayName: 'Agent Info'
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            envFile="infra/environments/${{ parameters.appName }}-${{ env.key }}.bicep"
            echo "Deploying ${{ env.key }} using template: $envFile"
          
            az deployment group create \
              --resource-group ${{ env.value.resourceGroup }} \
              --template-file $envFile \
              --parameters \
                appName=${{ parameters.appName }} \
                environmentName='${{ env.key }}' \
                location='${{ env.value.location }}' \
                tags={} \
                subscriptionId='${{ parameters.subscriptionId }}'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: echo "##vso[task.setvariable variable=${{ env.key }}AgentFallback;isOutput=true]true"
        displayName: 'Mark Fallback Active'

  - stage: Deploy_${{ env.key }}
    displayName: 'Direct Deploy to ${{ env.key }} (Local Agent)'
    condition: eq(variables.useHostedAgent, false)
    jobs:
    - job: DeployDirect_${{ env.key }}
      pool:
        name: ${{ parameters.localAgentName }}
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: "echo \"Using agent: $(Agent.Name)\""
        displayName: 'Agent Info'
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            envFile="infra/environments/${{ parameters.appName }}-${{ env.key }}.bicep"
            echo "Deploying ${{ env.key }} using template: $envFile"
          
            az deployment group create \
              --resource-group ${{ env.value.resourceGroup }} \
              --template-file $envFile \
              --parameters \
                appName=${{ parameters.appName }} \
                environmentName='${{ env.key }}' \
                location='${{ env.value.location }}' \
                tags={} \
                subscriptionId='${{ parameters.subscriptionId }}'

            