trigger:
  branches:
    include:
      - main

parameters:
  - name: useHostedAgent
    type: boolean
    default: true

  - name: appName
    type: string
    default: 'AzdoTools'

  - name: subscriptionId
    type: string
    default: '42a2eb5c-8d13-451c-8b50-069e05cdbf86'

  - name: hostedAgentName
    type: string
    default: 'Azure Pipelines'

  - name: localAgentName
    type: string
    default: 'Self-hosted Agents'

  - name: environments
    type: object
    default:
      dev:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Dev'
      test:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Test'

variables:
  useHostedAgent: ${{ parameters.useHostedAgent }}
  sharedResourceGroup: ${{ parameters.appName }}-RG-Shared

stages:
- stage: ProvisionSubscription_Hosted
  displayName: 'Subscription Hosted: Prepare Subscription-Level Resources (Hosted Agent)'
  condition: eq(variables.useHostedAgent, true)
  jobs:
  - job: ProvisionSubscriptionBaseline_HostedAgent
    pool:
      name: ${{ parameters.hostedAgentName }}
      vmImage: 'ubuntu-latest'
    variables:
      hostType: 0     # Hosted agent
      envName: 'sub'  # Subscription-level resource
    steps:
    - task: Bash@3
      name: SimulateFailure
      inputs:
        targetType: 'inline'
        script: |
          echo "Simulating hosted agent failure..."
          exit 1
      displayName: 'Simulate Hosted Failure'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Using agent: $(Agent.Name)"
      displayName: 'Agent Info'

    - task: AzureCLI@2
      name: DeployInfra
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Provisioning baseline subscription infrastructure with hosted agent..."
          az deployment sub create \
            --location 'centralus' \
            --template-file infra/subscription-baseline.bicep \
            --parameters \
              rgSuffixes=$(jq -nc --argjson envs '${{ convertToJson(parameters.environments) }}' '$envs | keys + ["Shared"]') \
              projectPrefix=${{ parameters.appName }} \
              location='centralus'
      displayName: 'Deploy Subscription Baseline (Hosted)'

    - task: PowerShell@2
      displayName: 'Log Provision Result'
      condition: always()
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
        arguments: >
          -EnvName $(envName)
          -HostType $(hostType)
          -Result $([int]($LASTEXITCODE -eq 0))
          -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Stage Result'
      condition: always()
      inputs:
        targetPath: '$(Pipeline.Workspace)/ProvisionResult'
        artifactName: 'ProvisionResult_$(System.StageName)'

- stage: ProvisionSubscription_LocalFallback
  displayName: 'Subscription Fallback: Subscription-Level Resources (Local Agent)'
  condition: and(eq(variables.useHostedAgent, true), failed())
  jobs:
  - job: ProvisionSubscriptionBaseline_FallbackToLocalAgent
    pool:
      name: ${{ parameters.localAgentName }}
    variables:
      hostType: 1     # Local fallback
      envName: 'sub'  # Subscription-level
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Fallback triggered — using local agent"
          echo "##vso[task.setvariable variable=subscriptionAgentFallback;isOutput=true]true"
      displayName: 'Mark Fallback Active'

    - task: AzureCLI@2
      name: DeployInfra
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Provisioning baseline subscription infrastructure with local agent..."

          # Extract environment suffixes
          $rgSuffixes = $env:parameters_environments | ConvertFrom-Json | Get-Member -MemberType NoteProperty | ForEach-Object { $_.Name }
          $rgSuffixes += 'Shared'

          # Build JSON parameters file
          $paramObj = @{
            rgSuffixes     = @{ value = $rgSuffixes }
            projectPrefix  = @{ value = '${{ parameters.appName }}' }
            location       = @{ value = 'centralus' }
          }

          $paramFilePath = Join-Path $env:TEMP "params.json"
          $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

          Write-Host "Parameters written to $paramFilePath"
          Get-Content $paramFilePath

          # Run deployment with @file syntax
          az deployment sub create `
            --location 'centralus' `
            --template-file '$(Build.SourcesDirectory)/infra/subscription-baseline.bicep' `
            --parameters @$paramFilePath
      env:
        parameters_environments: ${{ convertToJson(parameters.environments) }}
      displayName: 'Deploy Subscription Baseline (Fallback)'

    - task: PowerShell@2
      displayName: 'Log Provision Result'
      condition: always()
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
        arguments: >
          -EnvName $(envName)
          -HostType $(hostType)
          -Result $([int]($LASTEXITCODE -eq 0))
          -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Stage Result'
      condition: always()
      inputs:
        targetPath: '$(Pipeline.Workspace)/ProvisionResult'
        artifactName: 'ProvisionResult_$(System.StageName)'

- stage: ProvisionSubscription_LocalFlagDriven
  displayName: 'Subscription Local Specified: Provision Subscription Resources via Local Agent'
  condition: eq(variables.useHostedAgent, false)
  jobs:
  - job: ProvisionSubscriptionBaseline_SpecifiedLocalAgent
    pool:
      name: ${{ parameters.localAgentName }}
    variables:
      hostType: 2     # Local specified
      envName: 'sub'  # Subscription-level
    steps:
    - task: AzureCLI@2
      name: DeployInfra
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Provisioning subscription infrastructure directly with local agent..."

          # Extract environment suffixes
          $rgSuffixes = $env:parameters_environments | ConvertFrom-Json | Get-Member -MemberType NoteProperty | ForEach-Object { $_.Name }
          $rgSuffixes += 'Shared'

          # Construct parameters
          $paramObj = @{
            rgSuffixes    = @{ value = $rgSuffixes }
            projectPrefix = @{ value = '${{ parameters.appName }}' }
            location      = @{ value = 'centralus' }
          }

          # Write parameter file
          $paramFilePath = Join-Path $env:TEMP "params.json"
          $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

          Write-Host "Parameter file contents:"
          Get-Content $paramFilePath

          # Deploy using @params syntax
          az deployment sub create `
            --location 'centralus' `
            --template-file 'infra/subscription-baseline.bicep' `
            --parameters @$paramFilePath
      env:
        parameters_environments: ${{ convertToJson(parameters.environments) }}
      displayName: 'Deploy Subscription Baseline (Local Agent Refactored)'

    - task: PowerShell@2
      displayName: 'Log Provision Result'
      condition: always()
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
        arguments: >
          -EnvName $(envName)
          -HostType $(hostType)
          -Result $([int]($LASTEXITCODE -eq 0))
          -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Stage Result'
      condition: always()
      inputs:
        targetPath: '$(Pipeline.Workspace)/ProvisionResult'
        artifactName: 'ProvisionResult_$(System.StageName)'
          
- stage: ProvisionShared_Hosted
  condition: eq(variables.useHostedAgent, true)
  displayName: 'Shared Hosted: Provision Shared Resources with Hosted Agent'
  jobs:
  - job: ProvisionSharedResources_HostedAgent
    pool:
      name: ${{ parameters.hostedAgentName }}
      vmImage: 'ubuntu-latest'
    variables:
      hostType: 0     # Hosted agent
      envName: 'shared'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Simulating hosted agent failure..."
          exit 1
      displayName: 'Simulate Hosted Failure'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: "echo \"Using agent: $(Agent.Name)\""
      displayName: 'Agent Info'

    - task: AzureCLI@2
      name: DeploySharedInfra
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create \
            --resource-group ${{ variables.sharedResourceGroup }} \
            --template-file infra/shared-infrastructure.bicep \
            --parameters \
              location='centralus' \
              resourceGroupName='${{ variables.sharedResourceGroup }}' \
              tags={} \
              subscriptionId='${{ parameters.subscriptionId }}'
      displayName: 'Deploy Shared Infrastructure (Hosted)'

    - task: PowerShell@2
      displayName: 'Log Provision Result'
      condition: always()
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
        arguments: >
          -EnvName $(envName)
          -HostType $(hostType)
          -Result $([int]($LASTEXITCODE -eq 0))
          -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Stage Result'
      condition: always()
      inputs:
        targetPath: '$(Pipeline.Workspace)/ProvisionResult'
        artifactName: 'ProvisionResult_$(System.StageName)'

- stage: ProvisionShared_LocalFallback
  condition: and(eq(variables.useHostedAgent, true), failed())
  displayName: 'Shared Fallback: Provision Shared Resources with Local Agent'
  jobs:
  - job: ProvisionSharedResources_FallbackToLocalAgent
    pool:
      name: ${{ parameters.localAgentName }}
    variables:
      hostType: 1     # Local fallback
      envName: 'shared'
    steps:
    - task: AzureCLI@2
      name: DeploySharedFallbackInfra
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Fallback triggered"
          Write-Host "##vso[task.setvariable variable=sharedAgentFallback;isOutput=true]true"

          # Construct parameters
          $paramObj = @{
            location = @{ value = 'centralus' }
            resourceGroupName = @{ value = '${{ variables.sharedResourceGroup }}' }
            tags = @{ value = @{} }
            subscriptionId = @{ value = '${{ parameters.subscriptionId }}' }
          }

          # Write parameter file
          $paramFilePath = Join-Path $env:TEMP "shared-fallback-params.json"
          $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

          Write-Host "Fallback parameter file contents:"
          Get-Content $paramFilePath

          # Deploy using parameter file
          az deployment group create `
            --resource-group '${{ variables.sharedResourceGroup }}' `
            --template-file 'infra/shared-infrastructure.bicep' `
            --parameters @$paramFilePath
      displayName: 'Deploy Shared Infrastructure (Local Fallback)'

    - task: PowerShell@2
      displayName: 'Log Provision Result'
      condition: always()
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
        arguments: >
          -EnvName $(envName)
          -HostType $(hostType)
          -Result $([int]($LASTEXITCODE -eq 0))
          -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Stage Result'
      condition: always()
      inputs:
        targetPath: '$(Pipeline.Workspace)/ProvisionResult'
        artifactName: 'ProvisionResult_$(System.StageName)'

- stage: ProvisionShared_LocalFlagDriven
  condition: eq(variables.useHostedAgent, false)
  displayName: 'Shared Local Specified: Provision Shared Resources (Local Agent)'
  jobs:
  - job: ProvisionSharedResources_SpecifiedLocalAgent
    pool:
      name: ${{ parameters.localAgentName }}
    variables:
      hostType: 2     # Local specified
      envName: 'shared'
    steps:
    - task: AzureCLI@2
      name: DeploySharedInfra
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Using agent: $env:AGENT_NAME"

          # Build parameters object
          $paramObj = @{
            location           = @{ value = 'centralus' }
            resourceGroupName  = @{ value = '${{ variables.sharedResourceGroup }}' }
            tags               = @{ value = @{} }
            subscriptionId     = @{ value = '${{ parameters.subscriptionId }}' }
          }

          # Write parameter file
          $paramFilePath = Join-Path $env:TEMP "shared-infra-params.json"
          $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

          Write-Host "Parameter file contents:"
          Get-Content $paramFilePath

          # Deploy with parameter file
          az deployment group create `
            --resource-group '${{ variables.sharedResourceGroup }}' `
            --template-file 'infra/shared-infrastructure.bicep' `
            --parameters @$paramFilePath
      displayName: 'Deploy Shared Infrastructure (Refactored for Local Agent)'

    - task: PowerShell@2
      displayName: 'Log Provision Result'
      condition: always()
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
        arguments: >
          -EnvName $(envName)
          -HostType $(hostType)
          -Result $([int]($LASTEXITCODE -eq 0))
          -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Stage Result'
      condition: always()
      inputs:
        targetPath: '$(Pipeline.Workspace)/ProvisionResult'
        artifactName: 'ProvisionResult_$(System.StageName)'

- ${{ each env in parameters.environments }}:
  - stage: ProvisionEnvLoop_Hosted_${{ env.key }}
    displayName: 'Env ${{ env.key }} Hosted: Deploy ${{ env.key }} via Hosted Agent'
    condition: eq(variables.useHostedAgent, true)
    jobs:
    - job: ProvisionEnvResources_HostedAgent_${{ env.key }}
      pool:
        name: ${{ parameters.hostedAgentName }}
        vmImage: 'ubuntu-latest'
      variables:
        hostType: 0          # Hosted agent
        envName: ${{ env.key }}
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo "Simulating hosted agent failure..."
            exit 1
        displayName: 'Simulate Hosted Failure'

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo "Using agent: $(Agent.Name)"
        displayName: 'Agent Info'

      - task: AzureCLI@2
        name: DeployEnvInfra
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            envFile="infra/environments/${{ parameters.appName }}-${{ env.key }}.bicep"
            echo "Deploying ${{ env.key }} using template: $envFile"

            az deployment group create \
              --resource-group ${{ env.value.resourceGroup }} \
              --template-file $envFile \
              --parameters \
                appName=${{ parameters.appName }} \
                environmentName='${{ env.key }}' \
                location='${{ env.value.location }}' \
                tags={} \
                subscriptionId='${{ parameters.subscriptionId }}' \
              --debug
        displayName: 'Deploy Environment Infrastructure (Hosted)'

      - task: PowerShell@2
        displayName: 'Log Provision Result'
        condition: always()
        inputs:
          targetType: 'filePath'
          filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
          arguments: >
            -EnvName $(envName)
            -HostType $(hostType)
            -Result $([int]($LASTEXITCODE -eq 0))
            -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Stage Result'
        condition: always()
        inputs:
          targetPath: '$(Pipeline.Workspace)/ProvisionResult'
          artifactName: 'ProvisionResult_$(System.StageName)'

  - stage: ProvisionEnvLoop_LocalFallback_${{ env.key }}
    displayName: 'Env ${{ env.key }} Fallback to Local Agent'
    condition: and(eq(variables.useHostedAgent, true), failed())
    jobs:
    - job: ProvisionEnvResources_FallbackToLocalAgent_${{ env.key }}
      pool:
        name: ${{ parameters.localAgentName }}
      variables:
        hostType: 1          # Local fallback
        envName: ${{ env.key }}
      steps:
      - task: AzureCLI@2
        name: DeployEnvFallbackInfra
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            Write-Host "Using agent: $env:AGENT_NAME"
  
            # Build template path
            $envKey = '${{ env.key }}'
            $templateFile = "infra/environments/${{ parameters.appName }}-$envKey.bicep"
            Write-Host "Deploying $envKey using template: $templateFile"
  
            # Construct parameters object
            $paramObj = @{
              appName         = @{ value = '${{ parameters.appName }}' }
              environmentName = @{ value = '${{ env.key }}' }
              location        = @{ value = '${{ env.value.location }}' }
              tags            = @{ value = @{} }
              subscriptionId  = @{ value = '${{ parameters.subscriptionId }}' }
            }
  
            # Write parameter file
            $paramFilePath = Join-Path $env:TEMP "$envKey-fallback-params.json"
            $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8
  
            Write-Host "Parameter file contents:"
            Get-Content $paramFilePath
  
            # Deploy with parameter file
            az deployment group create `
              --resource-group '${{ env.value.resourceGroup }}' `
              --template-file $templateFile `
              --parameters @$paramFilePath
        displayName: 'Deploy Environment Fallback (${ env.key })'
  
      - task: PowerShell@2
        displayName: 'Log Provision Result'
        condition: always()
        inputs:
          targetType: 'filePath'
          filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
          arguments: >
            -EnvName $(envName)
            -HostType $(hostType)
            -Result $([int]($LASTEXITCODE -eq 0))
            -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Stage Result'
        condition: always()
        inputs:
          targetPath: '$(Pipeline.Workspace)/ProvisionResult'
          artifactName: 'ProvisionResult_$(System.StageName)'
      
  - stage: ProvisionEnvLoop_LocalFlagDriven_${{ env.key }}
    displayName: 'Env ${{ env.key }} Local Specified: Deploy to ${{ env.key }} (Local Agent)'
    condition: eq(variables.useHostedAgent, false)
    jobs:
    - job: ProvisionEnvResources_SpecifiedLocalAgent_${{ env.key }}
      pool:
        name: ${{ parameters.localAgentName }}
      variables:
        hostType: 2          # Local specified
        envName: ${{ env.key }}
      steps:
      - task: AzureCLI@2
        name: DeployEnvDirectInfra
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            Write-Host "Using agent: $env:AGENT_NAME"
  
            # Build template file path
            $envKey = '${{ env.key }}'
            $templateFile = "infra/environments/${{ parameters.appName }}-$envKey.bicep"
            Write-Host "Deploying $envKey using template: $templateFile"
  
            # Construct parameter object
            $paramObj = @{
              appName         = @{ value = '${{ parameters.appName }}' }
              environmentName = @{ value = $envKey }
              location        = @{ value = '${{ env.value.location }}' }
              tags            = @{ value = @{} }
              subscriptionId  = @{ value = '${{ parameters.subscriptionId }}' }
            }
  
            # Write parameters file
            $paramFilePath = Join-Path $env:TEMP "$envKey-deploy-params.json"
            $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8
  
            Write-Host "Parameter file contents:"
            Get-Content $paramFilePath
  
            # Run deployment
            az deployment group create `
              --resource-group '${{ env.value.resourceGroup }}' `
              --template-file $templateFile `
              --parameters @$paramFilePath
        displayName: 'Deploy Environment Direct (${ env.key })'
  
      - task: PowerShell@2
        displayName: 'Log Provision Result'
        condition: always()
        inputs:
          targetType: 'filePath'
          filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
          arguments: >
            -EnvName $(envName)
            -HostType $(hostType)
            -Result $([int]($LASTEXITCODE -eq 0))
            -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Stage Result'
        condition: always()
        inputs:
          targetPath: '$(Pipeline.Workspace)/ProvisionResult'
          artifactName: 'ProvisionResult_$(System.StageName)'

- stage: EvaluateProvisionMatrix
  displayName: 'Evaluate Provisioning Final Result'
  dependsOn:
    - ProvisionSubscription_Hosted
    - ProvisionSubscription_LocalFallback
    - ProvisionSubscription_LocalFlagDriven
    - ProvisionShared_Hosted
    - ProvisionShared_LocalFallback
    - ProvisionShared_LocalFlagDriven
    - ${{ each env in parameters.environments }}:
        - ProvisionEnvLoop_Hosted_${{ env.key }}
        - ProvisionEnvLoop_LocalFallback_${{ env.key }}
        - ProvisionEnvLoop_LocalFlagDriven_${{ env.key }}
  condition: always()
  jobs:
  - job: VerifyProvisioning
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Download all stage-level artifacts
    - task: DownloadPipelineArtifact@2
      displayName: 'Download All Stage Results'
      inputs:
        path: '$(Pipeline.Workspace)/AllResults'

    # Merge all provision-results.json files
    - task: PowerShell@2
      displayName: 'Merge Provision Results'
      inputs:
        targetType: 'inline'
        script: |
          $finalDir = "$(Pipeline.Workspace)/Final"
          if (!(Test-Path $finalDir)) {
              New-Item -Path $finalDir -ItemType Directory -Force | Out-Null
          }
    
          $merged = @()
          Get-ChildItem "$(Pipeline.Workspace)/AllResults" -Recurse -Filter provision-results.json | ForEach-Object {
              $content = Get-Content $_.FullName | ConvertFrom-Json
              $merged += $content
          }
    
          $mergedPath = Join-Path $finalDir 'provision-results.json'
          $merged | ConvertTo-Json -Depth 10 | Set-Content $mergedPath

    - task: PowerShell@2
      displayName: 'Summarize Provision Results'
      inputs:
        targetType: 'inline'
        script: |
          $resultsPath = "$(Pipeline.Workspace)/AllResults/merged/provision-results.json"
    
          if (!(Test-Path $resultsPath)) {
            Write-Host "❌ Results file not found at $resultsPath"
            exit 1
          }
    
          $rawJson = Get-Content $resultsPath -Raw
          $data = $null
          try {
            $data = $rawJson | ConvertFrom-Json
          } catch {
            Write-Host "❌ Failed to parse provision-results.json"
            exit 1
          }
    
          $grouped = $data | Group-Object EnvName
    
          Write-Host "`n✅ Summary of provision results:"
          foreach ($envGroup in $grouped) {
            Write-Host "🔹 Environment: $($envGroup.Name)"
            foreach ($entry in $envGroup.Group) {
              $host = if ($entry.HostType -eq 1) { "Local" } elseif ($entry.HostType -eq 2) { "Hosted" } else { "Unknown" }
              $status = if ($entry.Result -eq 1) { "Success" } elseif ($entry.Result -eq 0) { "Failed" } else { "Unknown" }
              Write-Host "    • HostType: $host → Result: $status"
            }
          }

    # Publish the merged result file
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Final Aggregated Result'
      inputs:
        targetPath: '$(Pipeline.Workspace)/Final'
        artifactName: 'ProvisionResult_Final'

    # Evaluate the merged result
    - task: PowerShell@2
      displayName: 'Evaluate Provision Matrix'
      inputs:
        targetType: 'inline'
        script: |
          . '$(Build.SourcesDirectory)/infra/scripts/Evaluate-ProvisionMatrix.ps1'
    
          $finalPath = "$(Pipeline.Workspace)/Final/provision-results.json"
    
          if (-not (Test-Path $finalPath)) {
            Write-Host "##vso[task.complete result=SucceededWithIssues;]Result file missing — fallback may have failed"
            exit 0
          }
    
          $results = Get-Content $finalPath | ConvertFrom-Json
          $eval = Evaluate-ProvisionMatrix -Results $results
    
          if (-not $eval.Success) {
            Write-Host "Provisioning matrix incomplete:"
            if ($eval.MissingEnvs.Count -gt 0) {
              Write-Host "  - Missing host coverage for envs: $($eval.MissingEnvs -join ', ')"
            }
            if (-not $eval.SharedPassed) { Write-Host "  - 'shared' stage did not pass." }
            if (-not $eval.SubPassed)    { Write-Host "  - 'sub' stage did not pass." }
            Write-Host "##vso[task.complete result=Failed;]Provision matrix failed"
            exit 1
          }
    
          Write-Host "Provisioning matrix is complete."
          Write-Host "##vso[task.complete result=Succeeded;]Provision matrix passed"