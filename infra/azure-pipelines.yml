trigger:
  branches:
    include:
      - main

parameters:
  - name: environments
    type: object
    default:
      dev:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Dev'
      test:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Test'
  - name: sharedResourceGroup
    type: string
    default: 'AzdoTools-RG-Shared'

variables:
  useHostedAgent: true  # Set to true to use hosted agents; false for local pool
  agentPoolName: ${{ if eq(variables.useHostedAgent, true) }} HostedAgent ${{ else }} LocalPool
  subscriptionId: 42a2eb5c-8d13-451c-8b50-069e05cdbf86 

# Try hosted for shared infrustructure
stages:
- stage: TryHostedShared
  condition: eq(variables.agentPoolName, 'HostedAgent')
  jobs:
  - job: DeploySharedHosted
    pool:
      name: HostedAgent
      vmImage: 'ubuntu-latest'
    steps:
    - bash: echo "Using agent: $(Agent.Name)"
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Deploying shared infra via HostedAgent..."
          az deployment sub create \
            --location centralus \
            --template-file infra/shared-infrastructure.bicep \
            --parameters @infra/shared-parameters.bicepparam \
                         subscriptionId=${{ variables.subscriptionId }}

# Fallback for shared infrastructure
- stage: FallbackSharedLocal
  condition: and(eq(variables.agentPoolName, 'HostedAgent'), failed())
  jobs:
  - job: DeploySharedLocalFallback
    pool:
      name: LocalPool
    steps:
    - bash: |
        echo "Fallback triggered"
        echo "##vso[task.setvariable variable=sharedAgentFallback;isOutput=true]true"
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment sub create \
            --location centralus \
            --template-file infra/shared-infrastructure.bicep \
            --parameters @infra/shared-parameters.bicepparam \
                         subscriptionId=${{ variables.subscriptionId }}

# Local-only shared infrustructure
- stage: ProvisionShared
  condition: ne(variables.agentPoolName, 'HostedAgent')
  jobs:
  - job: DeploySharedInfra
    pool:
      name: ${{ variables.agentPoolName }}
      ${{ if eq(variables.agentPoolName, 'HostedAgent') }}:
        vmImage: 'ubuntu-latest'
    steps:
    - bash: echo "Using agent: $(Agent.Name)"
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment sub create \
            --location centralus \
            --template-file infra/shared-infrastructure.bicep \
            --parameters @infra/shared-parameters.bicepparam \
                         subscriptionId=${{ variables.subscriptionId }}

# Per-Environment deployments with failover
- ${{ each env in parameters.environments }}:
  - stage: TryHosted_${{ env.key }}
    displayName: 'Deploy ${{ env.key }} via Hosted Agent'
    condition: eq(variables.agentPoolName, 'HostedAgent')
    jobs:
    - job: DeployHosted_${{ env.key }}
      pool:
        name: HostedAgent
        vmImage: 'ubuntu-latest'
      steps:
      - bash: echo "Using agent: $(Agent.Name)"
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub create \
              --location ${{ env.value.location }} \
              --template-file infra/deploy-environment.bicep \
              --parameters \
                appName=AzdoTools \
                environmentName=${{ env.key }} \
                location=${{ env.value.location }} \
                subscriptionId=${{ variables.subscriptionId }}
      - bash: echo "##vso[task.setvariable variable=${{ env.key }}AgentFallback;isOutput=true]false"

  - stage: Fallback_${{ env.key }}
    displayName: 'Fallback to Local Agent for ${{ env.key }}'
    condition: and(eq(variables.agentPoolName, 'HostedAgent'), failed())
    jobs:
    - job: DeployFallback_${{ env.key }}
      pool:
        name: LocalPool
      steps:
      - bash: echo "Using agent: $(Agent.Name)"
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub create \
              --location ${{ env.value.location }} \
              --template-file infra/deploy-environment.bicep \
              --parameters \
                appName=AzdoTools \
                environmentName=${{ env.key }} \
                location=${{ env.value.location }} \
                subscriptionId=${{ variables.subscriptionId }}
      - bash: echo "##vso[task.setvariable variable=${{ env.key }}AgentFallback;isOutput=true]true"

  - stage: Deploy_${{ env.key }}
    displayName: 'Direct Deploy to ${{ env.key }} (LocalPool)'
    condition: ne(variables.agentPoolName, 'HostedAgent')
    jobs:
    - job: DeployDirect_${{ env.key }}
      pool:
        name: ${{ variables.agentPoolName }}
        ${{ if eq(variables.agentPoolName, 'HostedAgent') }}:
          vmImage: 'ubuntu-latest'
      steps:
      - bash: echo "Using agent: $(Agent.Name)"
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub create \
              --location ${{ env.value.location }} \
              --template-file infra/deploy-environment.bicep \
              --parameters \
                appName=AzdoTools \
                environmentName=${{ env.key }} \
                location=${{ env.value.location }} \
                subscriptionId=${{ variables.subscriptionId }}
