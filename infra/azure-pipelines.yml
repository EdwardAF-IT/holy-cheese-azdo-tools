trigger:
  branches:
    include:
      - main
  paths:
    include:
      - infra/azure-pipelines.yml
      - infra/environments/**
      - infra/modules/**
      - infra/scripts/**
      - infra/pipelines/templates/**
      - infra/pipelines/infra-provision-loop.yml
    exclude:
      - infra/pipelines/setup-devops-environments.yml
      - infra/**/*.json

parameters:
  - name: useHostedAgent
    type: boolean
    default: true

  - name: appName
    type: string
    default: 'AzdoTools'

  - name: subscriptionId
    type: string
    default: '42a2eb5c-8d13-451c-8b50-069e05cdbf86'

  - name: hostedAgentName
    type: string
    default: 'Azure Pipelines'

  - name: localAgentName
    type: string
    default: 'Self-hosted Agents'

  - name: environments
    type: object
    default:
      dev:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Dev'
        environmentDisplayName: 'AzdoTools-Development'
      test:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Test'
        environmentDisplayName: 'AzdoTools-Test' 
      prod:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Prod'
        environmentDisplayName: 'AzdoTools-Production' 

  - name: provisionModes
    type: object
    default:
      - Hosted
      - LocalFallback
      - LocalFlagDriven

  - name: provisionScopes
    type: object
    default:
      - Subscription
      - Shared

variables:
  useHostedAgent: ${{ parameters.useHostedAgent }}
  sharedResourceGroup: ${{ parameters.appName }}-RG-Shared
  sharedEnvironmentDisplayName: ${{ parameters.appName }}-Shared
  finalArtifactName: 'ProvisionMetadata_Final'
  manifestName: 'artifact-manifest.json'

stages:
- stage: Provision_Subscription_Header
  displayName: 'Subscription-Level'
  condition: always()
  jobs:
  - job: NoOp
    condition: false
    steps:
    - script: echo "Visual header only"

- stage: Hosted_Subscription
  displayName: 'Hosted: Prepare Subscription-Level Resources (Hosted Agent)'
  condition: eq(variables.useHostedAgent, true)
  dependsOn: [Provision_Subscription_Header]
  jobs:
  - job: ProvisionSubscriptionBaseline_HostedAgent
    pool:
      name: ${{ parameters.hostedAgentName }}
      vmImage: 'ubuntu-latest'
    variables:
      hostType: 0     # Hosted agent
      envName: 'sub'  # Subscription-level resource
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Using agent: $(Agent.Name)"
      displayName: 'Agent Info'

    - task: AzureCLI@2
      name: DeployInfra
      displayName: 'Deploy Subscription Baseline (Hosted)'
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Provisioning baseline subscription infrastructure with hosted agent..."
          az deployment sub create \
            --location 'centralus' \
            --template-file infra/subscription-baseline.bicep \
            --parameters \
              rgSuffixes=$(jq -nc --argjson envs '${{ convertToJson(parameters.environments) }}' '$envs | keys + ["Shared"]') \
              projectPrefix=${{ parameters.appName }} \
              location='centralus'

          exitCode=$?
          echo "##vso[task.setvariable variable=SubHostedExitCode;isOutput=true]$exitCode"

    - task: PowerShell@2
      displayName: 'Write Subscription Manifest Block'
      condition: always()
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/infra/scripts/Write-ArtifactMetadata.ps1'
        arguments: >
          -ManifestPath "$(manifestPath)"
          -Environment "$(envName)"
          -Version "$(Build.BuildNumber)"
          -Commit "$(Build.SourceVersion)"
          -Notes "Provisioned subscription-level baseline (hosted)"
          -ArtifactPath "$(Pipeline.Workspace)/ProvisionResult/functionapp.zip"
          -Result $(DeployInfra.SubHostedExitCode)
          -HostType "$(hostType)"
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Provision Manifest'
      condition: always()
      inputs:
        targetPath: '$(Pipeline.Workspace)/ProvisionResult'
        artifactName: '${{ variables.finalArtifactName }}'

- stage: LocalFallback_Subscription
  displayName: 'Fallback: Subscription-Level Resources (Local Agent)'
  condition: and(eq(variables.useHostedAgent, true), failed())
  dependsOn: [Provision_Subscription_Header]
  jobs:
  - job: ProvisionSubscriptionBaseline_FallbackToLocalAgent
    pool:
      name: ${{ parameters.localAgentName }}
    variables:
      hostType: 1     # Local fallback
      envName: 'sub'  # Subscription-level
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Fallback triggered — using local agent"
          echo "##vso[task.setvariable variable=subscriptionAgentFallback;isOutput=true]true"
      displayName: 'Mark Fallback Active'

    - task: AzureCLI@2
      name: DeployInfra
      displayName: 'Deploy Subscription Baseline (Fallback)'
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Provisioning baseline subscription infrastructure with local agent..."

          # Extract environment suffixes
          $rgSuffixes = $env:parameters_environments | ConvertFrom-Json | Get-Member -MemberType NoteProperty | ForEach-Object { $_.Name }
          $rgSuffixes += 'Shared'

          # Build JSON parameters file
          $paramObj = @{
            rgSuffixes     = @{ value = $rgSuffixes }
            projectPrefix  = @{ value = '${{ parameters.appName }}' }
            location       = @{ value = 'centralus' }
          }

          $paramFilePath = Join-Path $env:TEMP "params.json"
          $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

          Write-Host "Parameters written to $paramFilePath"
          Get-Content $paramFilePath

          # Run deployment with @file syntax
          az deployment sub create `
            --location 'centralus' `
            --template-file '$(Build.SourcesDirectory)/infra/subscription-baseline.bicep' `
            --parameters @$paramFilePath

          $exitCode=$LASTEXITCODE
          Write-Host "##vso[task.setvariable variable=DeployInfraExitCode;isOutput=true]$exitCode"
      env:
        parameters_environments: ${{ convertToJson(parameters.environments) }}

    - task: PowerShell@2
      displayName: 'Write Subscription Manifest Block'
      condition: always()
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/infra/scripts/Write-ArtifactMetadata.ps1'
        arguments: >
          -ManifestPath "$(manifestPath)"
          -Environment "$(envName)"
          -Version "$(Build.BuildNumber)"
          -Commit "$(Build.SourceVersion)"
          -Notes "Provisioned subscription-level baseline (local fallback)"
          -ArtifactPath "$(Pipeline.Workspace)/ProvisionResult/functionapp.zip"
          -Result $(DeployInfra.DeployInfraExitCode)
          -HostType "$(hostType)"
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Provision Manifest'
      condition: always()
      inputs:
        targetPath: '$(Pipeline.Workspace)/ProvisionResult'
        artifactName: '${{ variables.finalArtifactName }}'

- stage: LocalFlagDriven_Subscription
  displayName: 'Local Specified: Provision Subscription Resources via Local Agent'
  condition: eq(variables.useHostedAgent, false)
  dependsOn: [Provision_Subscription_Header]
  jobs:
  - job: ProvisionSubscriptionBaseline_SpecifiedLocalAgent
    pool:
      name: ${{ parameters.localAgentName }}
    variables:
      hostType: 2     # Local specified
      envName: 'sub'  # Subscription-level
    steps:
    - task: AzureCLI@2
      name: DeployInfra
      displayName: 'Deploy Subscription Baseline (Local Agent Refactored)'
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Provisioning subscription infrastructure directly with local agent..."

          # Extract environment suffixes
          $rgSuffixes = $env:parameters_environments | ConvertFrom-Json | Get-Member -MemberType NoteProperty | ForEach-Object { $_.Name }
          $rgSuffixes += 'Shared'

          # Construct parameters
          $paramObj = @{
            rgSuffixes    = @{ value = $rgSuffixes }
            projectPrefix = @{ value = '${{ parameters.appName }}' }
            location      = @{ value = 'centralus' }
          }

          # Write parameter file
          $paramFilePath = Join-Path $env:TEMP "params.json"
          $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

          Write-Host "Parameter file contents:"
          Get-Content $paramFilePath

          # Deploy using @params syntax
          az deployment sub create `
            --location 'centralus' `
            --template-file 'infra/subscription-baseline.bicep' `
            --parameters @$paramFilePath

          $exitCode = $LASTEXITCODE
          Write-Host "##vso[task.setvariable variable=SubFlagExitCode;isOutput=true]$exitCode"

      env:
        parameters_environments: ${{ convertToJson(parameters.environments) }}

    - task: PowerShell@2
      displayName: 'Write Subscription Manifest Block'
      condition: always()
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/infra/scripts/Write-ArtifactMetadata.ps1'
        arguments: >
          -ManifestPath "$(manifestPath)"
          -Environment "$(envName)"
          -Version "$(Build.BuildNumber)"
          -Commit "$(Build.SourceVersion)"
          -Notes "Provisioned subscription-level baseline (local specified)"
          -ArtifactPath "$(Pipeline.Workspace)/ProvisionResult/functionapp.zip"
          -Result $(DeployInfra.SubFlagExitCode)
          -HostType "$(hostType)"
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Provision Manifest'
      condition: always()
      inputs:
        targetPath: '$(Pipeline.Workspace)/ProvisionResult'
        artifactName: '${{ variables.finalArtifactName }}'
        
- stage: Provision_Shared_Header
  displayName: 'Shared Resources'
  condition: always()
  jobs:
  - job: NoOp
    condition: false
    steps:
    - script: echo "Visual header only"

- stage: Hosted_Shared
  condition: eq(variables.useHostedAgent, true)
  displayName: 'Hosted: Provision Shared Resources with Hosted Agent'
  dependsOn: [Provision_Shared_Header]
  jobs:
  - deployment: ProvisionSharedResources_HostedAgent
    environment: ${{ variables.sharedEnvironmentDisplayName }}
    pool:
      name: ${{ parameters.hostedAgentName }}
      vmImage: 'ubuntu-latest'
    variables:
      hostType: 0   # Hosted agent
      envName: 'shared'
      manifestPath: '$(Pipeline.Workspace)/ProvisionResult/${{ variables.manifestName }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: Bash@3
            displayName: 'Agent Info'
            inputs:
              targetType: 'inline'
              script: |
                echo "Using agent: $(Agent.Name)"

          - task: AzureCLI@2
            name: DeploySharedInfra
            displayName: 'Deploy Shared Infrastructure (Hosted)'
            inputs:
              azureSubscription: 'HolyCheese-ServiceConnection'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                deploymentName="${{ parameters.appName }}-shared-deploy"

                az group update \
                  --name "${{ variables.sharedResourceGroup }}" \
                  --set tags.Environment='Shared' tags.App='${{ parameters.appName }}'

                az deployment group create \
                  --name "$deploymentName" \
                  --resource-group "${{ variables.sharedResourceGroup }}" \
                  --template-file infra/shared-infrastructure.bicep \
                  --parameters \
                    location='centralus' \
                    resourceGroupName="${{ variables.sharedResourceGroup }}" \
                    tags={} \
                    subscriptionId='${{ parameters.subscriptionId }}'

                # Extract outputs
                deploymentOutput=$(az deployment group show \
                  --resource-group "${{ variables.sharedResourceGroup }}" \
                  --name "$deploymentName" \
                  --query "properties.outputs" \
                  --output json)

                rgName=$(echo "$deploymentOutput" | jq -r '.rgName.value')
                subId=$(echo "$deploymentOutput" | jq -r '.subId.value')

                # Set pipeline variables
                echo "##vso[task.setvariable variable=SharedResourceGroupName]$rgName"
                echo "##vso[task.setvariable variable=SharedSubscriptionId]$subId"

                # Static resource names
                echo "##vso[task.setvariable variable=SharedInsightsName]AzdoTools-Shared-Insights"
                echo "##vso[task.setvariable variable=SharedHostingPlanName]AzdoTools-AppServicePlan-Shared"

                exitCode=$?
                echo "##vso[task.setvariable variable=SharedHostedExitCode;isOutput=true]$exitCode"

          - script: |
              echo "Listing script files:"
              ls -la $(Build.SourcesDirectory)/infra/scripts
            displayName: 'Verify Script Path'

          - task: PowerShell@2
            displayName: 'Write Manifest Record'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Write-ArtifactMetadata.ps1'
              arguments: >
                -ManifestPath "$(manifestPath)"
                -Environment "$(envName)"
                -Version "$(Build.BuildNumber)"
                -Commit "$(Build.SourceVersion)"
                -Notes "Provisioned shared resources (hosted)"
                -ArtifactPath "$(Pipeline.Workspace)/ProvisionResult/functionapp.zip"
                -Result $(DeploySharedInfra.SharedHostedExitCode)
                -HostType "$(hostType)"
                -ResourceGroupName "$(SharedResourceGroupName)"
                -SubscriptionId "$(SharedSubscriptionId)"
                -SharedInsightsName "$(SharedInsightsName)"
                -SharedHostingPlanName "$(SharedHostingPlanName)"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Provision Manifest'
            condition: always()
            inputs:
              targetPath: '$(Pipeline.Workspace)/ProvisionResult'
              artifactName: '${{ variables.finalArtifactName }}'

- stage: LocalFallback_Shared
  condition: and(eq(variables.useHostedAgent, true), failed())
  displayName: 'Fallback: Provision Shared Resources with Local Agent'
  dependsOn: [Provision_Shared_Header]
  jobs:
  - deployment: ProvisionSharedResources_FallbackToLocalAgent
    environment: ${{ variables.sharedEnvironmentDisplayName }}
    pool:
      name: ${{ parameters.localAgentName }}
    variables:
      hostType: 1       # Local agent
      envName: 'shared'
      manifestPath: '$(Pipeline.Workspace)/ProvisionResult/${{ variables.manifestName }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            name: DeploySharedFallbackInfra
            displayName: 'Deploy Shared Infrastructure (Local Fallback)'
            inputs:
              azureSubscription: 'HolyCheese-ServiceConnection'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Fallback triggered"
                Write-Host "##vso[task.setvariable variable=sharedAgentFallback;isOutput=true]true"

                $resourceGroup = '${{ variables.sharedResourceGroup }}'
                $deploymentName = '${{ parameters.appName }}-shared-deploy'

                $paramObj = @{
                  location = @{ value = 'centralus' }
                  resourceGroupName = @{ value = $resourceGroup }
                  tags = @{ value = @{} }
                  subscriptionId = @{ value = '${{ parameters.subscriptionId }}' }
                }

                $paramFilePath = Join-Path $env:TEMP "shared-fallback-params.json"
                $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

                Write-Host "Fallback parameter file contents:"
                Get-Content $paramFilePath

                az group update `
                  --name $resourceGroup `
                  --set tags.Environment='Shared' tags.App='${{ parameters.appName }}'

                az deployment group create `
                  --name $deploymentName `
                  --resource-group $resourceGroup `
                  --template-file 'infra/shared-infrastructure.bicep' `
                  --parameters @$paramFilePath

                # Extract outputs
                $deploymentOutput = az deployment group show `
                  --resource-group $resourceGroup `
                  --name $deploymentName `
                  --query "properties.outputs" `
                  --output json | ConvertFrom-Json

                $rgName = $deploymentOutput.rgName.value
                $subId = $deploymentOutput.subId.value

                # Set pipeline variables
                Write-Host "##vso[task.setvariable variable=SharedResourceGroupName]$rgName"
                Write-Host "##vso[task.setvariable variable=SharedSubscriptionId]$subId"
                Write-Host "##vso[task.setvariable variable=SharedInsightsName]AzdoTools-Shared-Insights"
                Write-Host "##vso[task.setvariable variable=SharedHostingPlanName]AzdoTools-AppServicePlan-Shared"

                $exitCode = $LASTEXITCODE
                Write-Host "##vso[task.setvariable variable=SharedFallbackExitCode;isOutput=true]$exitCode"

          - task: PowerShell@2
            displayName: 'Log Provision Result'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
              arguments: >
                -EnvName $(envName)
                -HostType $(hostType)
                -Result $(DeploySharedFallbackInfra.SharedFallbackExitCode)
                -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

          - task: PowerShell@2
            displayName: 'Write Manifest Record'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Write-ArtifactMetadata.ps1'
              arguments: >
                -ManifestPath "$(manifestPath)"
                -Environment "$(envName)"
                -Version "$(Build.BuildNumber)"
                -Commit "$(Build.SourceVersion)"
                -Notes "Provisioned shared resources (hosted)"
                -ArtifactPath "$(Pipeline.Workspace)/ProvisionResult/functionapp.zip"
                -Result $(DeploySharedInfra.SharedHostedExitCode)
                -HostType "$(hostType)"
                -ResourceGroupName "$(SharedResourceGroupName)"
                -SubscriptionId "$(SharedSubscriptionId)"
                -SharedInsightsName "$(SharedInsightsName)"
                -SharedHostingPlanName "$(SharedHostingPlanName)"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Provision Manifest'
            condition: always()
            inputs:
              targetPath: '$(Pipeline.Workspace)/ProvisionResult'
              artifactName: '${{ variables.finalArtifactName }}'

- stage: LocalFlagDriven_Shared
  condition: eq(variables.useHostedAgent, false)
  displayName: 'Local Specified: Provision Shared Resources (Local Agent)'
  dependsOn: [Provision_Shared_Header]
  jobs:
  - deployment: ProvisionSharedResources_SpecifiedLocalAgent
    environment: ${{ variables.sharedEnvironmentDisplayName }}
    pool:
      name: ${{ parameters.localAgentName }}
    variables:
      hostType: 2
      envName: 'shared'
      manifestPath: '$(Pipeline.Workspace)/ProvisionResult/${{ variables.manifestName }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            name: DeploySharedInfra
            displayName: 'Deploy Shared Infrastructure (Refactored for Local Agent)'
            inputs:
              azureSubscription: 'HolyCheese-ServiceConnection'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Using agent: $env:AGENT_NAME"

                $resourceGroup = '${{ variables.sharedResourceGroup }}'
                $deploymentName = '${{ parameters.appName }}-shared-deploy'

                $paramObj = @{
                  location = @{ value = 'centralus' }
                  resourceGroupName = @{ value = $resourceGroup }
                  tags = @{ value = @{} }
                  subscriptionId = @{ value = '${{ parameters.subscriptionId }}' }
                }

                $paramFilePath = Join-Path $env:TEMP "shared-infra-params.json"
                $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

                Write-Host "Parameter file contents:"
                Get-Content $paramFilePath

                az group update `
                  --name $resourceGroup `
                  --set tags.Environment='Shared' tags.App='${{ parameters.appName }}'

                az deployment group create `
                  --name $deploymentName `
                  --resource-group $resourceGroup `
                  --template-file 'infra/shared-infrastructure.bicep' `
                  --parameters @$paramFilePath

                # Extract outputs
                $deploymentOutput = az deployment group show `
                  --resource-group $resourceGroup `
                  --name $deploymentName `
                  --query "properties.outputs" `
                  --output json | ConvertFrom-Json

                $rgName = $deploymentOutput.rgName.value
                $subId = $deploymentOutput.subId.value

                # Set pipeline variables
                Write-Host "##vso[task.setvariable variable=SharedResourceGroupName]$rgName"
                Write-Host "##vso[task.setvariable variable=SharedSubscriptionId]$subId"
                Write-Host "##vso[task.setvariable variable=SharedInsightsName]AzdoTools-Shared-Insights"
                Write-Host "##vso[task.setvariable variable=SharedHostingPlanName]AzdoTools-AppServicePlan-Shared"

                $exitCode = $LASTEXITCODE
                Write-Host "##vso[task.setvariable variable=SharedLocalExitCode;isOutput=true]$exitCode"

          - task: PowerShell@2
            displayName: 'Log Provision Result'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
              arguments: >
                -EnvName $(envName)
                -HostType $(hostType)
                -Result $(DeploySharedInfra.SharedLocalExitCode)
                -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

          - task: PowerShell@2
            displayName: 'Write Manifest Record'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Write-ArtifactMetadata.ps1'
              arguments: >
                -ManifestPath "$(manifestPath)"
                -Environment "$(envName)"
                -Version "$(Build.BuildNumber)"
                -Commit "$(Build.SourceVersion)"
                -Notes "Provisioned shared resources (hosted)"
                -ArtifactPath "$(Pipeline.Workspace)/ProvisionResult/functionapp.zip"
                -Result $(DeploySharedInfra.SharedHostedExitCode)
                -HostType "$(hostType)"
                -ResourceGroupName "$(SharedResourceGroupName)"
                -SubscriptionId "$(SharedSubscriptionId)"
                -SharedInsightsName "$(SharedInsightsName)"
                -SharedHostingPlanName "$(SharedHostingPlanName)"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Provision Manifest'
            condition: always()
            inputs:
              targetPath: '$(Pipeline.Workspace)/ProvisionResult'
              artifactName: '${{ variables.finalArtifactName }}'

- ${{ each env in parameters.environments }}:
  - stage: Provision_${{ env.key }}_Header
    displayName: 'Env: ${{ env.key }}'
    condition: always()
    jobs:
    - job: NoOp
      condition: false
      steps:
      - script: echo "Visual header only"

- stage: Hosted_${{ env.key }}
  displayName: 'Hosted: Deploy ${{ env.key }} via Hosted Agent'
  condition: eq(variables.useHostedAgent, true)
  dependsOn:
    - Provision_${{ env.key }}_Header
  jobs:
  - deployment: ProvisionEnvResources_HostedAgent_${{ env.key }}
    environment: ${{ env.value.environmentDisplayName }}
    pool:
      name: ${{ parameters.hostedAgentName }}
      vmImage: 'ubuntu-latest'
    variables:
      hostType: 0
      envName: ${{ env.key }}
      manifestPath: '$(Pipeline.Workspace)/ProvisionResult/${{ variables.manifestName }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: Bash@3
            displayName: 'Agent Info'
            inputs:
              targetType: 'inline'
              script: |
                echo "Using agent: $(Agent.Name)"

          - task: AzureCLI@2
            name: DeployEnvInfra
            displayName: 'Deploy Environment Infrastructure (Hosted)'
            inputs:
              azureSubscription: 'HolyCheese-ServiceConnection'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                deploymentName="${{ parameters.appName }}-${{ env.key }}-deploy"
                envFile="infra/environments/${{ parameters.appName }}-${{ env.key }}.bicep"
                echo "🚀 Deploying ${{ env.key }} using template: $envFile"

                az group update \
                  --name ${{ env.value.resourceGroup }} \
                  --set tags.Environment=${{ env.value.environmentDisplayName }} \
                        tags.App='${{ parameters.appName }}'

                az deployment group create \
                  --name "$deploymentName" \
                  --resource-group ${{ env.value.resourceGroup }} \
                  --template-file "$envFile" \
                  --parameters \
                    appName='${{ parameters.appName }}' \
                    environmentName='${{ env.key }}' \
                    location='${{ env.value.location }}' \
                    tags={} \
                    subscriptionId='${{ parameters.subscriptionId }}'

                # Extract outputs
                deploymentOutput=$(az deployment group show \
                  --resource-group "${{ env.value.resourceGroup }}" \
                  --name "$deploymentName" \
                  --query "properties.outputs" \
                  --output json)

                functionAppName=$(echo "$deploymentOutput" | jq -r '.functionAppName.value')
                keyVaultName=$(echo "$deploymentOutput" | jq -r '.keyVaultName.value')
                storageAccountName=$(echo "$deploymentOutput" | jq -r '.storageAccountName.value')

                # Set pipeline variables
                echo "##vso[task.setvariable variable=FunctionAppName]$functionAppName"
                echo "##vso[task.setvariable variable=KeyVaultName]$keyVaultName"
                echo "##vso[task.setvariable variable=StorageAccountName]$storageAccountName"

                exitCode=$?
                echo "##vso[task.setvariable variable=EnvHostedExitCode;isOutput=true]$exitCode"

          - task: PowerShell@2
            displayName: 'Log Provision Result'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
              arguments: >
                -EnvName $(envName)
                -HostType $(hostType)
                -Result $(DeployEnvInfra.EnvHostedExitCode)
                -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

          - task: PowerShell@2
            displayName: 'Write Manifest Record'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Write-ArtifactMetadata.ps1'
              arguments: >
                -ManifestPath "$(manifestPath)"
                -Environment "$(envName)"
                -Version "$(Build.BuildNumber)"
                -Commit "$(Build.SourceVersion)"
                -Notes "Provisioned shared resources (hosted)"
                -ArtifactPath "$(Pipeline.Workspace)/ProvisionResult/functionapp.zip"
                -Result $(DeploySharedInfra.SharedHostedExitCode)
                -HostType "$(hostType)"
                -ResourceGroupName "$(SharedResourceGroupName)"
                -SubscriptionId "$(SharedSubscriptionId)"
                -SharedInsightsName "$(SharedInsightsName)"
                -SharedHostingPlanName "$(SharedHostingPlanName)"
                -FunctionAppName "$(FunctionAppName)"
                -KeyVaultName "$(KeyVaultName)"
                -StorageAccountName "$(StorageAccountName)"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Provision Manifest'
            condition: always()
            inputs:
              targetPath: '$(Pipeline.Workspace)/ProvisionResult'
              artifactName: '${{ variables.finalArtifactName }}'

- stage: LocalFallback_${{ env.key }}
  displayName: 'Fallback to Local Agent'
  condition: and(eq(variables.useHostedAgent, true), failed())
  dependsOn:
    - Provision_${{ env.key }}_Header
  jobs:
  - deployment: ProvisionEnvResources_FallbackToLocalAgent_${{ env.key }}
    environment: ${{ env.value.environmentDisplayName }}
    pool:
      name: ${{ parameters.localAgentName }}
    variables:
      hostType: 1
      envName: ${{ env.key }}
      manifestPath: '$(Pipeline.Workspace)/ProvisionResult/${{ variables.manifestName }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            name: DeployEnvFallbackInfra
            displayName: 'Deploy Environment Fallback (${ env.key })'
            inputs:
              azureSubscription: 'HolyCheese-ServiceConnection'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Using agent: $env:AGENT_NAME"

                $deploymentName="${{ parameters.appName }}-${{ env.key }}-deploy"
                $envKey = '${{ env.key }}'
                $templateFile = "infra/environments/${{ parameters.appName }}-$envKey.bicep"
                Write-Host "Deploying $envKey using template: $templateFile"

                $paramObj = @{
                  appName         = @{ value = '${{ parameters.appName }}' }
                  environmentName = @{ value = $envKey }
                  location        = @{ value = '${{ env.value.location }}' }
                  tags            = @{ value = @{} }
                  subscriptionId  = @{ value = '${{ parameters.subscriptionId }}' }
                }

                $paramFilePath = Join-Path $env:TEMP "$envKey-fallback-params.json"
                $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

                Write-Host "Parameter file contents:"
                Get-Content $paramFilePath

                az group update `
                  --name '${{ env.value.resourceGroup }}' `
                  --set tags.Environment='${{ env.value.environmentDisplayName }}' tags.App='${{ parameters.appName }}'

                $deploymentName = "${{ parameters.appName }}-$envKey-deploy"
                az deployment group create `
                  --name $deploymentName `
                  --resource-group '${{ env.value.resourceGroup }}' `
                  --template-file $templateFile `
                  --parameters @$paramFilePath

                # Extract outputs
                $deploymentOutput = az deployment group show `
                  --resource-group '${{ env.value.resourceGroup }}' `
                  --name $deploymentName `
                  --query "properties.outputs" `
                  --output json | ConvertFrom-Json

                $functionAppName = $deploymentOutput.functionAppName.value
                $keyVaultName = $deploymentOutput.keyVaultName.value
                $storageAccountName = $deploymentOutput.storageAccountName.value

                # Set pipeline variables
                Write-Host "##vso[task.setvariable variable=FunctionAppName]$functionAppName"
                Write-Host "##vso[task.setvariable variable=KeyVaultName]$keyVaultName"
                Write-Host "##vso[task.setvariable variable=StorageAccountName]$storageAccountName"

                $exitCode = $LASTEXITCODE
                Write-Host "##vso[task.setvariable variable=EnvFallbackExitCode;isOutput=true]$exitCode"

          - task: PowerShell@2
            displayName: 'Log Provision Result'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
              arguments: >
                -EnvName $(envName)
                -HostType $(hostType)
                -Result $(DeployEnvFallbackInfra.EnvFallbackExitCode)
                -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

          - task: PowerShell@2
            displayName: 'Write Manifest Record'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Write-ArtifactMetadata.ps1'
              arguments: >
                -ManifestPath "$(manifestPath)"
                -Environment "$(envName)"
                -Version "$(Build.BuildNumber)"
                -Commit "$(Build.SourceVersion)"
                -Notes "Provisioned shared resources (hosted)"
                -ArtifactPath "$(Pipeline.Workspace)/ProvisionResult/functionapp.zip"
                -Result $(DeploySharedInfra.SharedHostedExitCode)
                -HostType "$(hostType)"
                -ResourceGroupName "$(SharedResourceGroupName)"
                -SubscriptionId "$(SharedSubscriptionId)"
                -SharedInsightsName "$(SharedInsightsName)"
                -SharedHostingPlanName "$(SharedHostingPlanName)"
                -FunctionAppName "$(FunctionAppName)"
                -KeyVaultName "$(KeyVaultName)"
                -StorageAccountName "$(StorageAccountName)"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Provision Manifest'
            condition: always()
            inputs:
              targetPath: '$(Pipeline.Workspace)/ProvisionResult'
              artifactName: '${{ variables.finalArtifactName }}'
        
- stage: LocalFlagDriven_${{ env.key }}
  displayName: 'Local Specified: Deploy to ${{ env.key }} (Local Agent)'
  condition: eq(variables.useHostedAgent, false)
  dependsOn:
    - Provision_${{ env.key }}_Header
  jobs:
  - deployment: ProvisionEnvResources_SpecifiedLocalAgent_${{ env.key }}
    environment: ${{ env.value.environmentDisplayName }}
    pool:
      name: ${{ parameters.localAgentName }}
    variables:
      hostType: 2
      envName: ${{ env.key }}
      manifestPath: '$(Pipeline.Workspace)/ProvisionResult/${{ variables.manifestName }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            name: DeployEnvDirectInfra
            displayName: 'Deploy Environment Direct (${ env.key })'
            inputs:
              azureSubscription: 'HolyCheese-ServiceConnection'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Using agent: $env:AGENT_NAME"

                $deploymentName="${{ parameters.appName }}-${{ env.key }}-deploy"
                $envKey = '${{ env.key }}'
                $templateFile = "infra/environments/${{ parameters.appName }}-$envKey.bicep"
                Write-Host "Deploying $envKey using template: $templateFile"

                $paramObj = @{
                  appName         = @{ value = '${{ parameters.appName }}' }
                  environmentName = @{ value = $envKey }
                  location        = @{ value = '${{ env.value.location }}' }
                  tags            = @{ value = @{} }
                  subscriptionId  = @{ value = '${{ parameters.subscriptionId }}' }
                }

                $paramFilePath = Join-Path $env:TEMP "$envKey-deploy-params.json"
                $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

                Write-Host "Parameter file contents:"
                Get-Content $paramFilePath

                az group update `
                  --name '${{ env.value.resourceGroup }}' `
                  --set tags.Environment='${{ env.value.environmentDisplayName }}' tags.App='${{ parameters.appName }}'

                $deploymentName = "${{ parameters.appName }}-$envKey-deploy"
                az deployment group create `
                  --name $deploymentName `
                  --resource-group '${{ env.value.resourceGroup }}' `
                  --template-file $templateFile `
                  --parameters @$paramFilePath

                # Extract outputs
                $deploymentOutput = az deployment group show `
                  --resource-group '${{ env.value.resourceGroup }}' `
                  --name $deploymentName `
                  --query "properties.outputs" `
                  --output json | ConvertFrom-Json

                $functionAppName = $deploymentOutput.functionAppName.value
                $keyVaultName = $deploymentOutput.keyVaultName.value
                $storageAccountName = $deploymentOutput.storageAccountName.value

                # Set pipeline variables
                Write-Host "##vso[task.setvariable variable=FunctionAppName]$functionAppName"
                Write-Host "##vso[task.setvariable variable=KeyVaultName]$keyVaultName"
                Write-Host "##vso[task.setvariable variable=StorageAccountName]$storageAccountName"

                $exitCode = $LASTEXITCODE
                Write-Host "##vso[task.setvariable variable=EnvLocalExitCode;isOutput=true]$exitCode"

          - task: PowerShell@2
            displayName: 'Log Provision Result'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Log-ProvisionResult.ps1'
              arguments: >
                -EnvName $(envName)
                -HostType $(hostType)
                -Result $(DeployEnvDirectInfra.EnvLocalExitCode)
                -ResultFilePath "$(Pipeline.Workspace)/ProvisionResult/provision-results.json"

          - task: PowerShell@2
            displayName: 'Write Manifest Record'
            condition: always()
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/infra/scripts/Write-ArtifactMetadata.ps1'
              arguments: >
                -ManifestPath "$(manifestPath)"
                -Environment "$(envName)"
                -Version "$(Build.BuildNumber)"
                -Commit "$(Build.SourceVersion)"
                -Notes "Provisioned shared resources (hosted)"
                -ArtifactPath "$(Pipeline.Workspace)/ProvisionResult/functionapp.zip"
                -Result $(DeploySharedInfra.SharedHostedExitCode)
                -HostType "$(hostType)"
                -ResourceGroupName "$(SharedResourceGroupName)"
                -SubscriptionId "$(SharedSubscriptionId)"
                -SharedInsightsName "$(SharedInsightsName)"
                -SharedHostingPlanName "$(SharedHostingPlanName)"
                -FunctionAppName "$(FunctionAppName)"
                -KeyVaultName "$(KeyVaultName)"
                -StorageAccountName "$(StorageAccountName)"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Provision Manifest'
            condition: always()
            inputs:
              targetPath: '$(Pipeline.Workspace)/ProvisionResult'
              artifactName: '${{ variables.finalArtifactName }}'

- stage: EvaluateProvisionMatrix
  displayName: 'Evaluate Provisioning Final Result'
  dependsOn:
    - Hosted_Subscription
    - LocalFallback_Subscription
    - LocalFlagDriven_Subscription
    - Hosted_Shared
    - LocalFallback_Shared
    - LocalFlagDriven_Shared
    - ${{ each env in parameters.environments }}:
        - Hosted_${{ env.key }}
        - LocalFallback_${{ env.key }}
        - LocalFlagDriven_${{ env.key }}
  condition: always()
  jobs:
  - job: VerifyProvisioning
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Final Manifest Artifact'
      inputs:
        artifact: ${{ variables.finalArtifactName }}
        path: $(Pipeline.Workspace)/${{ variables.finalArtifactName }}

    - task: PowerShell@2
      displayName: 'Evaluate Provision Matrix from Manifest'
      inputs:
        targetType: 'inline'
        script: |
          . '$(Build.SourcesDirectory)/infra/scripts/Evaluate-ProvisionMatrix.ps1'

          $manifestPath = "$(Pipeline.Workspace)/${{ variables.finalArtifactName }}/${{ variables.manifestName }}"

          if (!(Test-Path $manifestPath)) {
            Write-Host "##vso[task.complete result=SucceededWithIssues;]Manifest missing — fallback may have failed"
            exit 0
          }

          $manifest = Get-Content $manifestPath | ConvertFrom-Json
          $eval = Evaluate-ProvisionMatrix -Manifest $manifest

          if (-not $eval.Success) {
            Write-Host "`n❌ Provisioning matrix incomplete:"
            if ($eval.MissingEnvs.Count -gt 0) {
              Write-Host "  - Missing host coverage for envs: $($eval.MissingEnvs -join ', ')"
            }
            if (-not $eval.SharedPassed) { Write-Host "  - 'shared' stage did not pass." }
            if (-not $eval.SubPassed)    { Write-Host "  - 'sub' stage did not pass." }
            Write-Host "##vso[task.complete result=Failed;]Provision matrix failed"
            exit 1
          }

          Write-Host "`n✅ Provisioning matrix is complete."
          Write-Host "##vso[task.complete result=Succeeded;]Provision matrix passed"
