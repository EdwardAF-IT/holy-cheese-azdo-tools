trigger:
  branches:
    include:
      - main

parameters:
  - name: useHostedAgent
    type: boolean
    default: true

  - name: appName
    type: string
    default: 'AzdoTools'

  - name: subscriptionId
    type: string
    default: '42a2eb5c-8d13-451c-8b50-069e05cdbf86'

  - name: hostedAgentName
    type: string
    default: 'Azure Pipelines'

  - name: localAgentName
    type: string
    default: 'Self-hosted Agents'

  - name: environments
    type: object
    default:
      dev:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Dev'
      test:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Test'

variables:
  useHostedAgent: ${{ parameters.useHostedAgent }}
  sharedResourceGroup: ${{ parameters.appName }}-RG-Shared

stages:
- stage: ProvisionSubscription_Hosted
  displayName: 'Prepare Subscription-Level Resources(Hosted Agent)'
  condition: eq(variables.useHostedAgent, true)
  jobs:
  - job: DeploySubscriptionBaseline
    pool:
      name: ${{ parameters.hostedAgentName }}
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Simulating hosted agent failure..."
          exit 1
      displayName: 'Simulate Hosted Failure'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Using agent: $(Agent.Name)"
      displayName: 'Agent Info'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Provisioning baseline subscription infrastructure with hosted agent..."
          az deployment sub create \
            --location 'centralus' \
            --template-file infra/subscription-baseline.bicep \
            --parameters \
              rgSuffixes=$(jq -nc --argjson envs '${{ convertToJson(parameters.environments) }}' '$envs | keys + ["Shared"]') \
              projectPrefix=${{ parameters.appName }} \
              location='centralus'
      displayName: 'Deploy Subscription Baseline (Hosted)'

- stage: ProvisionSubscription_LocalFallback
  displayName: 'Fallback Subscription-Level Resources (Local Agent)'
  condition: and(eq(variables.useHostedAgent, true), failed())
  jobs:
  - job: DeploySubscriptionBaselineFallback
    pool:
      name: ${{ parameters.localAgentName }}
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Fallback triggered â€” using local agent"
          echo "##vso[task.setvariable variable=subscriptionAgentFallback;isOutput=true]true"
      displayName: 'Mark Fallback Active'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Provisioning baseline subscription infrastructure with local agent..."
    
          # Extract environment suffixes
          $rgSuffixes = $env:parameters_environments | ConvertFrom-Json | Get-Member -MemberType NoteProperty | ForEach-Object { $_.Name }
          $rgSuffixes += 'Shared'
    
          # Build JSON parameters file
          $paramObj = @{
            rgSuffixes = @{ value = $rgSuffixes }
            projectPrefix = @{ value = '${{ parameters.appName }}' }
            location = @{ value = 'centralus' }
          }
    
          $paramFilePath = Join-Path $env:TEMP "params.json"
          $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8
    
          Write-Host "Parameters written to $paramFilePath"
          Get-Content $paramFilePath
    
          # Run deployment with @file syntax
          az deployment sub create `
            --location 'centralus' `
            --template-file 'infra/subscription-baseline.bicep' `
            --parameters @$paramFilePath
      env:
        parameters_environments: ${{ convertToJson(parameters.environments) }}
      displayName: 'Deploy Subscription Baseline (Fallback)'

- stage: ProvisionSubscription_LocalFlagDriven
  displayName: 'Provision Subscription Resources via Local Agent'
  condition: eq(variables.useHostedAgent, false)
  jobs:
  - job: DeploySubscriptionBaselineLocal
    pool:
      name: ${{ parameters.localAgentName }}
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Provisioning subscription infrastructure directly with local agent..."

          # Extract environment suffixes
          $rgSuffixes = $env:parameters_environments | ConvertFrom-Json | Get-Member -MemberType NoteProperty | ForEach-Object { $_.Name }
          $rgSuffixes += 'Shared'

          # Construct parameters
          $paramObj = @{
            rgSuffixes = @{ value = $rgSuffixes }
            projectPrefix = @{ value = '${{ parameters.appName }}' }
            location = @{ value = 'centralus' }
          }

          # Write parameter file
          $paramFilePath = Join-Path $env:TEMP "params.json"
          $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

          Write-Host "Parameter file contents:"
          Get-Content $paramFilePath

          # Deploy using @params syntax
          az deployment sub create `
            --location 'centralus' `
            --template-file 'infra/subscription-baseline.bicep' `
            --parameters @$paramFilePath
      env:
        parameters_environments: ${{ convertToJson(parameters.environments) }}
      displayName: 'Deploy Subscription Baseline (Local Agent Refactored)'

- stage: ProvisionShared_Hosted
  condition: eq(variables.useHostedAgent, true)
  displayName: 'Provision Shared Resources with Hosted Agent'
  jobs:
  - job: DeploySharedHosted
    pool:
      name: ${{ parameters.hostedAgentName }}
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "Simulating hosted agent failure..."
          exit 1
      displayName: 'Simulate Hosted Failure'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: "echo \"Using agent: $(Agent.Name)\""
      displayName: 'Agent Info'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create \
            --resource-group ${{ variables.sharedResourceGroup }} \
            --template-file infra/shared-infrastructure.bicep \
            --parameters \
              location='centralus' \
              resourceGroupName='${{ variables.sharedResourceGroup }}' \
              tags={} \
              subscriptionId='${{ parameters.subscriptionId }}' \

- stage: ProvisionShared_LocalFallback
  condition: and(eq(variables.useHostedAgent, true), failed())
  displayName: 'Provision Shared Resources with Fallback Agent'
  jobs:
  - job: DeploySharedLocalFallback
    pool:
      name: ${{ parameters.localAgentName }}
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Fallback triggered"
          Write-Host "##vso[task.setvariable variable=sharedAgentFallback;isOutput=true]true"

          # Construct parameters
          $paramObj = @{
            location = @{ value = 'centralus' }
            resourceGroupName = @{ value = '${{ variables.sharedResourceGroup }}' }
            tags = @{ value = @{} }
            subscriptionId = @{ value = '${{ parameters.subscriptionId }}' }
          }

          # Write parameter file
          $paramFilePath = Join-Path $env:TEMP "shared-fallback-params.json"
          $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

          Write-Host "Fallback parameter file contents:"
          Get-Content $paramFilePath

          # Deploy using parameter file
          az deployment group create `
            --resource-group '${{ variables.sharedResourceGroup }}' `
            --template-file 'infra/shared-infrastructure.bicep' `
            --parameters @$paramFilePath
      displayName: 'Deploy Shared Infrastructure (Local Fallback)'

- stage: ProvisionShared_LocalFlagDriven
  condition: eq(variables.useHostedAgent, false)
  displayName: 'Provision Shared Resources'
  jobs:
  - job: DeploySharedInfra
    pool:
      name: ${{ parameters.localAgentName }}
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Using agent: $env:AGENT_NAME"

          # Build parameters object
          $paramObj = @{
            location = @{ value = 'centralus' }
            resourceGroupName = @{ value = '${{ variables.sharedResourceGroup }}' }
            tags = @{ value = @{} }
            subscriptionId = @{ value = '${{ parameters.subscriptionId }}' }
          }

          # Write parameter file
          $paramFilePath = Join-Path $env:TEMP "shared-infra-params.json"
          $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8

          Write-Host "Parameter file contents:"
          Get-Content $paramFilePath

          # Deploy with parameter file
          az deployment group create `
            --resource-group '${{ variables.sharedResourceGroup }}' `
            --template-file 'infra/shared-infrastructure.bicep' `
            --parameters @$paramFilePath
      displayName: 'Deploy Shared Infrastructure (Refactored for Local Agent)'

- ${{ each env in parameters.environments }}:
  - stage: ProvisionEnvLoop_Hosted_${{ env.key }}
    displayName: 'Deploy ${{ env.key }} via Hosted Agent'
    condition: eq(variables.useHostedAgent, true)
    jobs:
    - job: DeployHosted_${{ env.key }}
      pool:
        name: ${{ parameters.hostedAgentName }}
        vmImage: 'ubuntu-latest'
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo "Simulating hosted agent failure..."
            exit 1
        displayName: 'Simulate Hosted Failure'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: "echo \"Using agent: $(Agent.Name)\""
        displayName: 'Agent Info'
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            envFile="infra/environments/${{ parameters.appName }}-${{ env.key }}.bicep"
            echo "Deploying ${{ env.key }} using template: $envFile"
          
            az deployment group create \
              --resource-group ${{ env.value.resourceGroup }} \
              --template-file $envFile \
              --parameters \
                appName=${{ parameters.appName }} \
                environmentName='${{ env.key }}' \
                location='${{ env.value.location }}' \
                tags={} \
                subscriptionId='${{ parameters.subscriptionId }}' \
              --debug
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: echo "##vso[task.setvariable variable=${{ env.key }}AgentFallback;isOutput=true]false"
        displayName: 'Mark Hosted Deploy Success'

  - stage: ProvisionEnvLoop_LocalFallback_${{ env.key }}
    displayName: 'Fallback to Local Agent for ${{ env.key }}'
    condition: and(eq(variables.useHostedAgent, true), failed())
    jobs:
    - job: DeployFallback_${{ env.key }}
      pool:
        name: ${{ parameters.localAgentName }}
      steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            Write-Host "Using agent: $env:AGENT_NAME"
  
            # Build template path
            $envKey = '${{ env.key }}'
            $templateFile = "infra/environments/${{ parameters.appName }}-$envKey.bicep"
            Write-Host "Deploying $envKey using template: $templateFile"
  
            # Construct parameters object
            $paramObj = @{
              appName = @{ value = '${{ parameters.appName }}' }
              environmentName = @{ value = '${{ env.key }}' }
              location = @{ value = '${{ env.value.location }}' }
              tags = @{ value = @{} }
              subscriptionId = @{ value = '${{ parameters.subscriptionId }}' }
            }
  
            # Write parameter file
            $paramFilePath = Join-Path $env:TEMP "$envKey-fallback-params.json"
            $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8
  
            Write-Host "Parameter file contents:"
            Get-Content $paramFilePath
  
            # Deploy with parameter file
            az deployment group create `
              --resource-group '${{ env.value.resourceGroup }}' `
              --template-file $templateFile `
              --parameters @$paramFilePath
        displayName: 'Deploy Environment Fallback (${ env.key })'
  
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            Write-Host "##vso[task.setvariable variable=${{ env.key }}AgentFallback;isOutput=true]true"
        displayName: 'Mark Fallback Active'
    
  - stage: ProvisionEnvLoop_LocalFlagDriven_${{ env.key }}
    displayName: 'Direct Deploy to ${{ env.key }} (Local Agent)'
    condition: eq(variables.useHostedAgent, false)
    jobs:
    - job: DeployDirect_${{ env.key }}
      pool:
        name: ${{ parameters.localAgentName }}
      steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            Write-Host "Using agent: $env:AGENT_NAME"
  
            # Build template file path
            $envKey = '${{ env.key }}'
            $templateFile = "infra/environments/${{ parameters.appName }}-$envKey.bicep"
            Write-Host "Deploying $envKey using template: $templateFile"
  
            # Construct parameter object
            $paramObj = @{
              appName = @{ value = '${{ parameters.appName }}' }
              environmentName = @{ value = $envKey }
              location = @{ value = '${{ env.value.location }}' }
              tags = @{ value = @{} }
              subscriptionId = @{ value = '${{ parameters.subscriptionId }}' }
            }
  
            # Write parameters file
            $paramFilePath = Join-Path $env:TEMP "$envKey-deploy-params.json"
            $paramObj | ConvertTo-Json -Depth 2 | Set-Content -Path $paramFilePath -Encoding UTF8
  
            Write-Host "Parameter file contents:"
            Get-Content $paramFilePath
  
            # Run deployment
            az deployment group create `
              --resource-group '${{ env.value.resourceGroup }}' `
              --template-file $templateFile `
              --parameters @$paramFilePath
        displayName: 'Deploy Environment Direct (${ env.key })'

- stage: ReportPipelineResult
  displayName: 'Final Pipeline Result'
  dependsOn:
    - ProvisionSubscription_Hosted
    - ProvisionSubscription_LocalFallback
    - ProvisionSubscription_LocalFlagDriven
    - ProvisionShared_Hosted
    - ProvisionShared_LocalFallback
    - ProvisionShared_LocalFlagDriven
    - ProvisionEnvLoop_Hosted
    - ProvisionEnvLoop_LocalFallback
    - ProvisionEnvLoop_LocalFlagDriven
  condition: and(
    or(
      succeeded('ProvisionSubscription_Hosted'),
      succeeded('ProvisionSubscription_LocalFallback'),
      succeeded('ProvisionSubscription_LocalFlagDriven')
    ),
    or(
      succeeded('ProvisionShared_Hosted'),
      succeeded('ProvisionShared_LocalFallback'),
      succeeded('ProvisionShared_LocalFlagDriven')
    ),
    or(
      succeeded('ProvisionEnvLoop_Hosted'),
      succeeded('ProvisionEnvLoop_LocalFallback'),
      succeeded('ProvisionEnvLoop_LocalFlagDriven')
    )
  )
  jobs:
  - job: MarkOverallSuccess
    displayName: 'Mark Pipeline as Successful'
    steps:
    - script: echo "One complete provisioning path succeeded. Reporting overall success."
            