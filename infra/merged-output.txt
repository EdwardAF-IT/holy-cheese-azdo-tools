C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\azure-pipelines.yml:
trigger:
  branches:
    include:
      - main

parameters:
  - name: environments
    type: object
    default:
      dev:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Dev'
      test:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Test'
  - name: sharedResourceGroup
    type: string
    default: 'AzdoTools-RG-Shared'

variables:
  useHostedAgent: false # set to true to try hosted
  agentPoolName: ${{ if eq(variables.useHostedAgent, true) }}: HostedAgent
                  ${{ if eq(variables.useHostedAgent, false) }}: LocalPool

stages:
  # üß≠ Try hosted agent first if requested
  - stage: TryHostedShared
    displayName: 'Try Shared Infra on Hosted Agent'
    condition: eq(variables.agentPoolName, 'HostedAgent')
    jobs:
    - job: DeploySharedHosted
      displayName: 'Deploy Shared Resources via Hosted Agent'
      pool:
        name: HostedAgent
        vmImage: 'ubuntu-latest'
      steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            echo "Deploying shared infra via HostedAgent..."
            az deployment sub create \
              --location centralus \
              --template-file infra/shared-infrastructure.bicep \
              --parameters @infra/shared-parameters.bicepparam

  # üîÅ Fallback if hosted fails
  - stage: FallbackSharedLocal
    displayName: 'Fallback to Local Agent for Shared Infra'
    condition: and(eq(variables.agentPoolName, 'HostedAgent'), failed())
    jobs:
    - job: DeploySharedLocalFallback
      displayName: 'Deploy Shared Resources via Local Agent (Fallback)'
      pool:
        name: LocalPool
      steps:
      - bash: echo "Fallback triggered" && echo "##vso[task.setvariable variable=sharedAgentFallback;isOutput=true]true"
        displayName: 'Mark Fallback Active'
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            echo "Fallback: deploying shared infra via LocalPool..."
            az deployment sub create \
              --location centralus \
              --template-file infra/shared-infrastructure.bicep \
              --parameters @infra/shared-parameters.bicepparam

  # üß± Direct use of LocalPool (if hosted not requested)
  - stage: ProvisionShared
    displayName: 'Provision Shared Infrastructure (LocalPool)'
    condition: ne(variables.agentPoolName, 'HostedAgent')
    jobs:
    - job: DeploySharedInfra
      displayName: 'Deploy Shared Resources'
      pool:
        name: ${{ variables.agentPoolName }}
        vmImage: 'ubuntu-latest'
      steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            echo "Deploying shared infra via LocalPool..."
            az deployment sub create \
              --location centralus \
              --template-file infra/shared-infrastructure.bicep \
              --parameters @infra/shared-parameters.bicepparam

  # üöÄ Deploy each environment (after shared infra)
  - ${{ each env in parameters.environments }}:
    - stage: Deploy_${{ env.key }}
      displayName: 'Deploy to ${{ env.key }}'
      dependsOn:
        - TryHostedShared
        - FallbackSharedLocal
        - ProvisionShared
      variables:
        sharedAgentFallback: $[stageDependencies.FallbackSharedLocal.DeploySharedLocalFallback.outputs['sharedAgentFallback']]
      jobs:
      - template: pipelines/templates/deploy-environment.yml
        parameters:
          appName: 'AzdoTools'
          environmentName: ${{ env.key }}
          location: ${{ env.value.location }}
          resourceGroup: ${{ env.value.resourceGroup }}
          agentPoolName: ${{ variables.agentPoolName }}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\deploy-environment.bicep:
{
  "$schema": "https://aka.ms/bicep-parameters-schema#v1",
  "parameters": {
    "location": {
      "value": "centralus"
    },
    "subscriptionId": {
      "value": "42a2eb5c-8d13-451c-8b50-069e05cdbf86"
    },
    "appName": {
      "value": "AzdoTools"
    },
    "owner": {
      "value": "coriolis@live.com"
    },
    "tags": {
      "value": {
        "Owner": "Edward",
        "App": "AzdoTools",
        "Environment": "shared",
        "ManagedBy": "AzurePipeline"
      }
    }
  }
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\shared-infrastructure.bicep:
param resourceGroupName string
param location string
param subscriptionId string
param tags object

resource sharedInsights 'microsoft.insights/components@2020-02-02' = {
  name: 'AzdoTools-Shared-Insights'
  location: location
  kind: 'web'
  properties: {
    Application_Type: 'web'
    RetentionInDays: 90
  }
  tags: tags
}

resource sharedPlan 'Microsoft.Web/serverfarms@2024-11-01' = {
  name: 'AzdoTools-AppServicePlan-Shared'
  location: location
  sku: {
    name: 'Y1'
    tier: 'Dynamic'
  }
  properties: {}
  tags: tags
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\environments\AzdoTools-dev.bicep:
param location string
param appName string
param environmentName string

var tags = {
  App: appName
  Environment: environmentName
  Owner: 'Edward'
}

var prefix = '${appName}-${environmentName}'
var sharedInsightsId = '/subscriptions/<SUB_ID>/resourceGroups/AzdoTools-RG-Shared/providers/microsoft.insights/components/azdotools-shared-insights'
var sharedHostingPlanName = 'AzdoTools-AppServicePlan-Shared'

// Key Vault
module kv './modules/keyVault.bicep' = {
  name: '${prefix}-kv'
  params: {
    kvName: '${prefix}-kv'
    location: location
    tags: tags
  }
}

// Storage Account
module storage './modules/storage.bicep' = {
  name: '${prefix}-storage'
  params: {
    storageName: toLower('${prefix}storage')
    location: location
    tags: tags
  }
}

// Function App
module fnapp './modules/functionApp.bicep' = {
  name: '${prefix}-fnapp'
  params: {
    appName: prefix
    location: location
    hostingPlanName: sharedHostingPlanName
    insightsId: sharedInsightsId
    storageAccountName: storage.outputs.storageName
    tags: tags
  }
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\environments\AzdoTools-test.bicep:
param location string
param appName string
param environmentName string

var tags = {
  App: appName
  Environment: environmentName
  Owner: 'Edward'
}

var prefix = '${appName}-${environmentName}'
var sharedInsightsId = '/subscriptions/<SUB_ID>/resourceGroups/AzdoTools-RG-Shared/providers/microsoft.insights/components/azdotools-shared-insights'
var sharedHostingPlanName = 'AzdoTools-AppServicePlan-Shared'

// Key Vault
module kv './modules/keyVault.bicep' = {
  name: '${prefix}-kv'
  params: {
    kvName: '${prefix}-kv'
    location: location
    tags: tags
  }
}

// Storage Account
module storage './modules/storage.bicep' = {
  name: '${prefix}-storage'
  params: {
    storageName: toLower('${prefix}storage')
    location: location
    tags: tags
  }
}

// Function App
module fnapp './modules/functionApp.bicep' = {
  name: '${prefix}-fnapp'
  params: {
    appName: prefix
    location: location
    hostingPlanName: sharedHostingPlanName
    insightsId: sharedInsightsId
    storageAccountName: storage.outputs.storageName
    tags: tags
  }
}