C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\azure-pipelines.yml:
trigger:
  branches:
    include:
      - main

parameters:
  - name: environments
    type: object
    default:
      dev:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Dev'
      test:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Test'
  - name: sharedResourceGroup
    type: string
    default: 'AzdoTools-RG-Shared'

stages:
  # Provision the shared infrastructure
  - stage: ProvisionShared
    displayName: 'Provision Shared Infrastructure'
    jobs:
    - job: DeploySharedInfra
      displayName: 'Deploy Shared Resources'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HolyCheese-ServiceConnection'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub create \
              --location centralus \
              --template-file infra/shared-infrastructure.bicep \
              --parameters @infra/shared-parameters.bicepparam

    # Provision each individual environment according to how its files are defined
  - ${{ each env in parameters.environments }}:
    - stage: Deploy_${{ env.key }}
      displayName: 'Deploy to ${{ env.key }}'
      jobs:
      - template: pipelines/templates/deploy-environment.yml
        parameters:
          appName: 'AzdoTools'
          environmentName: ${{ env.key }}
          location: ${{ env.value.location }}
          resourceGroup: ${{ env.value.resourceGroup }}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\deploy-environment.bicep:
{
  "$schema": "https://aka.ms/bicep-parameters-schema#v1",
  "parameters": {
    "location": {
      "value": "centralus"
    },
    "subscriptionId": {
      "value": "42a2eb5c-8d13-451c-8b50-069e05cdbf86"
    },
    "appName": {
      "value": "AzdoTools"
    },
    "owner": {
      "value": "coriolis@live.com"
    },
    "tags": {
      "value": {
        "Owner": "Edward",
        "App": "AzdoTools",
        "Environment": "shared",
        "ManagedBy": "AzurePipeline"
      }
    }
  }
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\shared-infrastructure.bicep:
param resourceGroupName string
param location string
param subscriptionId string
param tags object

resource sharedInsights 'microsoft.insights/components@2020-02-02' = {
  name: 'AzdoTools-Shared-Insights'
  location: location
  kind: 'web'
  properties: {
    Application_Type: 'web'
    RetentionInDays: 90
  }
  tags: tags
}

resource sharedPlan 'Microsoft.Web/serverfarms@2024-11-01' = {
  name: 'AzdoTools-AppServicePlan-Shared'
  location: location
  sku: {
    name: 'Y1'
    tier: 'Dynamic'
  }
  properties: {}
  tags: tags
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\environments\AzdoTools-dev.bicep:
param location string
param appName string
param environmentName string

var tags = {
  App: appName
  Environment: environmentName
  Owner: 'Edward'
}

var prefix = '${appName}-${environmentName}'
var sharedInsightsId = '/subscriptions/<SUB_ID>/resourceGroups/AzdoTools-RG-Shared/providers/microsoft.insights/components/azdotools-shared-insights'
var sharedHostingPlanName = 'AzdoTools-AppServicePlan-Shared'

// Key Vault
module kv './modules/keyVault.bicep' = {
  name: '${prefix}-kv'
  params: {
    kvName: '${prefix}-kv'
    location: location
    tags: tags
  }
}

// Storage Account
module storage './modules/storage.bicep' = {
  name: '${prefix}-storage'
  params: {
    storageName: toLower('${prefix}storage')
    location: location
    tags: tags
  }
}

// Function App
module fnapp './modules/functionApp.bicep' = {
  name: '${prefix}-fnapp'
  params: {
    appName: prefix
    location: location
    hostingPlanName: sharedHostingPlanName
    insightsId: sharedInsightsId
    storageAccountName: storage.outputs.storageName
    tags: tags
  }
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\environments\AzdoTools-test.bicep:
param location string
param appName string
param environmentName string

var tags = {
  App: appName
  Environment: environmentName
  Owner: 'Edward'
}

var prefix = '${appName}-${environmentName}'
var sharedInsightsId = '/subscriptions/<SUB_ID>/resourceGroups/AzdoTools-RG-Shared/providers/microsoft.insights/components/azdotools-shared-insights'
var sharedHostingPlanName = 'AzdoTools-AppServicePlan-Shared'

// Key Vault
module kv './modules/keyVault.bicep' = {
  name: '${prefix}-kv'
  params: {
    kvName: '${prefix}-kv'
    location: location
    tags: tags
  }
}

// Storage Account
module storage './modules/storage.bicep' = {
  name: '${prefix}-storage'
  params: {
    storageName: toLower('${prefix}storage')
    location: location
    tags: tags
  }
}

// Function App
module fnapp './modules/functionApp.bicep' = {
  name: '${prefix}-fnapp'
  params: {
    appName: prefix
    location: location
    hostingPlanName: sharedHostingPlanName
    insightsId: sharedInsightsId
    storageAccountName: storage.outputs.storageName
    tags: tags
  }
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\modules\appInsights.bicep:
param insightsName string
param location string

resource appInsights 'microsoft.insights/components@2020-02-02' = {
  name: insightsName
  location: location
  kind: 'web'
  properties: {
    Application_Type: 'web'
    RetentionInDays: 90
  }
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\modules\functionApp.bicep:
param appName string
param location string
param hostingPlanName string
param insightsId string
param storageAccountName string

resource hostingPlan 'Microsoft.Web/serverfarms@2024-11-01' existing = {
  name: hostingPlanName
}

resource functionApp 'Microsoft.Web/sites@2024-11-01' = {
  name: appName
  location: location
  kind: 'functionapp'
  identity: { type: 'SystemAssigned' }
  properties: {
    serverFarmId: hostingPlan.id
    siteConfig: {
      appSettings: [
        {
          name: 'APPINSIGHTS_INSTRUMENTATIONKEY'
          value: insightsId
        }
        {
          name: 'AzureWebJobsStorage'
          value: 'DefaultEndpointsProtocol=https;AccountName=${storageAccountName};...'
        }
      ]
    }
  }
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\modules\keyVault.bicep:
param kvName string
param location string

resource keyVault 'Microsoft.KeyVault/vaults@2024-12-01-preview' = {
  name: kvName
  location: location
  properties: {
    sku: { name: 'Standard'; family: 'A' }
    enableRbacAuthorization: true
    publicNetworkAccess: 'Enabled'
  }
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\modules\storage.bicep:
param storageName string
param location string

resource storage 'Microsoft.Storage/storageAccounts@2025-01-01' = {
  name: storageName
  location: location
  sku: { name: 'Standard_LRS'; tier: 'Standard' }
  kind: 'Storage'
  properties: {
    supportsHttpsTrafficOnly: true
    encryption: {
      services: {
        blob: { enabled: true; keyType: 'Account' }
        file: { enabled: true; keyType: 'Account' }
      }
      keySource: 'Microsoft.Storage'
    }
  }
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\pipelines\infra-provision-loop.yml:
trigger:
  branches:
    include:
      - main

parameters:
  - name: appName
    type: string
    default: 'AzdoTools'
  - name: environments
    type: object
    default:
      dev:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Dev'
      staging:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Test'

stages:
- ${{ each env in parameters.environments }}:
  - stage: Deploy_${{ env.key }}
    displayName: 'Deploy ${{ parameters.appName }} to ${{ env.key }}'
    jobs:
    - template: pipelines/templates/deploy-environment.yml
      parameters:
        appName: ${{ parameters.appName }}
        environmentName: ${{ env.key }}
        location: ${{ env.value.location }}
        resourceGroup: ${{ env.value.resourceGroup }}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\pipelines\templates\deploy-environment.yml:
parameters:
  - name: appName
    type: string
  - name: environmentName
    type: string
  - name: location
    type: string
    default: 'centralus'
  - name: resourceGroup
    type: string

jobs:
- job: DeployInfra
  displayName: 'Provision Environment'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment sub create \
            --location ${{ parameters.location }} \
            --template-file infra/deploy-environment.bicep \
            --parameters \
              appName=${{ parameters.appName }} \
              environmentName=${{ parameters.environmentName }} \
              location=${{ parameters.location }}
      displayName: 'Deploy Environment Bicep'

