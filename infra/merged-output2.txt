C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\modules\appInsights.bicep:
param insightsName string
param location string
param tags object

resource appInsights 'microsoft.insights/components@2020-02-02' = {
  name: insightsName
  location: location
  kind: 'web'
  properties: {
    Application_Type: 'web'
    RetentionInDays: 90
  }
  tags: tags
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\modules\functionApp.bicep:
param appName string
param location string
param hostingPlanName string
param insightsId string
param storageAccountName string
param tags object

resource hostingPlan 'Microsoft.Web/serverfarms@2024-11-01' existing = {
  name: hostingPlanName
}

resource functionApp 'Microsoft.Web/sites@2024-11-01' = {
  name: appName
  location: location
  kind: 'functionapp'
  identity: { type: 'SystemAssigned' }
  properties: {
    serverFarmId: hostingPlan.id
    siteConfig: {
      appSettings: [
        {
          name: 'APPINSIGHTS_INSTRUMENTATIONKEY'
          value: insightsId
        }
        {
          name: 'AzureWebJobsStorage'
          value: 'DefaultEndpointsProtocol=https;AccountName=${storageAccountName};...'
        }
      ]
    }
  }
  tags: tags
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\modules\keyVault.bicep:
param kvName string
param location string
param tags object

resource keyVault 'Microsoft.KeyVault/vaults@2024-12-01-preview' = {
  name: kvName
  location: location
  properties: {
    sku: { name: 'Standard'; family: 'A' }
    enableRbacAuthorization: true
    publicNetworkAccess: 'Enabled'
  }
  tags: tags
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\modules\storage.bicep:
param storageName string
param location string
param tags object

resource storage 'Microsoft.Storage/storageAccounts@2025-01-01' = {
  name: storageName
  location: location
  sku: { name: 'Standard_LRS'; tier: 'Standard' }
  kind: 'Storage'
  properties: {
    supportsHttpsTrafficOnly: true
    encryption: {
      services: {
        blob: { enabled: true; keyType: 'Account' }
        file: { enabled: true; keyType: 'Account' }
      }
      keySource: 'Microsoft.Storage'
    }
  }
  tags: tags
}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\pipelines\infra-provision-loop.yml:
trigger:
  branches:
    include:
      - main

parameters:
  - name: appName
    type: string
    default: 'AzdoTools'
  - name: environments
    type: object
    default:
      dev:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Dev'
      staging:
        location: 'centralus'
        resourceGroup: 'AzdoTools-RG-Test'

stages:
- ${{ each env in parameters.environments }}:
  - stage: Deploy_${{ env.key }}
    displayName: 'Deploy ${{ parameters.appName }} to ${{ env.key }}'
    jobs:
    - template: pipelines/templates/deploy-environment.yml
      parameters:
        appName: ${{ parameters.appName }}
        environmentName: ${{ env.key }}
        location: ${{ env.value.location }}
        resourceGroup: ${{ env.value.resourceGroup }}


C:\Code\holy-cheese\holy-cheese-azdo-tools\infra\pipelines\templates\deploy-environment.yml:
parameters:
  - name: appName
    type: string
  - name: environmentName
    type: string
  - name: location
    type: string
    default: 'centralus'
  - name: resourceGroup
    type: string
  - name: agentPoolName
    type: string

jobs:
- job: DeployInfra
  displayName: 'Provision Environment'
  pool:
    name: ${{ parameters.agentPoolName }}
    vmImage: 'ubuntu-latest'
  steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'HolyCheese-ServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment sub create \
            --location ${{ parameters.location }} \
            --template-file infra/deploy-environment.bicep \
            --parameters \
              appName=${{ parameters.appName }} \
              environmentName=${{ parameters.environmentName }} \
              location=${{ parameters.location }}
      displayName: 'Deploy Environment Bicep'